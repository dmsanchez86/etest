{"version":3,"mappings":"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","names":["ot","constructor","e","i","a","s","this","x","subP","activatedRoute","queryParams","subscribe","r","console","log","Object","keys","params","length","store","dispatch","susA","actions","type","getAllData","ngOnInit","y","filters","ref","validationInitial","storeSrv","investmentsByDate","getCategoriesInvestments","getAllDataInvestments","ngOnDestroy","unsubscribe","n","t","selectors","lt","$t","select","l","investments","showChart","c","categories_investments","data","user","accounts","buildForm","sub","loading","loaded","m","h","_","g","v","complete","dataGraphics","A","G","M","form","value","filter","dataGraphicMonth2","generateDataGraphicMonth2","dataGraphicMonth3","generateDataGraphicMonth3","dataGraphicMonth4","chartOptionsMonth2","dataChartMonth2","chartOptionsMonth3","chartOptionsMonth4","dataChartMonth4","w","b","O","J","month","Y","D","N","Q","year","dataGraphicYear2","generateDataGraphicYear2","chartOptionsYear2","dataChartYear2","U","q","F","L","date","j","S","B","$","date1","E","H","date2","utils","series","name","chart","height","zoom","enabled","dataLabels","formatter","Intl","NumberFormat","format","stroke","curve","width","title","text","align","grid","show","borderColor","yaxis","lines","xaxis","map","toolbar","labels","plotOptions","pie","donut","total","showAlways","tooltip","theme","colors","treemap","distributed","enableShades","sort","Number","Date","reduce","split","toLocaleDateString","forEach","push","category_investment","dia","account","toggleChart","createUrl","Et","susP","route","id","getDataInvestment","getDataInvestmentHistory","investmentService","inversion","inversionHistory","Pt","sus","category","createInvestmentCategory","valid","controls","person","createCategoryInvestment","reset","K","any","categories","deleteCategory","id_person","deleteCategorieInvestment","oe","pageA","page","pages","quantity","limit","getInvestmentsByCategory","rows","pagesArray","setPage","parseInt","next","prev","seeByCategory","router","navigateByUrl","be","path","component","canActivate","at","children","utilsInvestments","tt","we","u","De","d","Je","z","Oe"],"sources":["./src/app/pages/dashboard/investments/start-investments/start-investments.component.ts","./src/app/pages/dashboard/investments/create/create-investment.component.ts","./src/app/pages/dashboard/investments/create/create-investment.component.html","./src/app/pages/dashboard/investments/investments.component.html","./src/app/pages/dashboard/investments/investments.component.ts","./src/app/pages/dashboard/investments/detail/detail-investment.component.html","./src/app/pages/dashboard/investments/detail/detail-investment.component.ts","./src/app/pages/dashboard/investments/investment-category/create/create-investment-category.component.ts","./src/app/pages/dashboard/investments/investment-category/create/create-investment-category.component.html","./src/app/pages/dashboard/investments/investment-category/detail/detail-investment-category.component.html","./src/app/pages/dashboard/investments/investment-category/detail/detail-investment-category.component.ts","./src/app/pages/dashboard/investments/graphics/graphics-investments.component.html","./src/app/pages/dashboard/investments/investments-routing.module.ts","./src/app/pages/dashboard/investments/home/home-investments.component.ts","./src/app/pages/dashboard/investments/home/home-investments.component.html","./src/app/pages/dashboard/investments/graphics/graphics-investments.component.ts","./src/app/pages/dashboard/investments/investments.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Actions } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subscription } from 'rxjs';\r\nimport { StoreService } from 'src/app/services/store.service';\r\nimport { IState } from 'src/app/store';\r\nimport { ResetFiltersInvestments, SetFiltersInvestmentsInitial } from 'src/app/store/actions/investments.actions';\r\n\r\n@Component({\r\n  selector: 'app-start-investments',\r\n  template: `\r\n    <router-outlet></router-outlet>\r\n  `\r\n})\r\nexport class StartInvestmentsComponent implements OnInit {\r\n  params: any = {};\r\n\r\n  validationInitial: boolean = false;\r\n\r\n  subP: Subscription = new Subscription();\r\n  susA: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute, \r\n    private store: Store<IState>,\r\n    private storeSrv: StoreService,\r\n    private actions: Actions<IState>\r\n  ) {\r\n    this.subP = this.activatedRoute.queryParams.subscribe(params => {\r\n      console.log('qa suscription (router) params start-investments.component', params);\r\n\r\n      if(Object.keys(this.params).length && !Object.keys(params).length){\r\n        this.store.dispatch(ResetFiltersInvestments());\r\n      }\r\n\r\n      this.params = params;\r\n    });\r\n\r\n    this.susA = this.actions.subscribe((action: any) => {\r\n      // console.log('action', action);\r\n      if(\r\n        action.type === '[Investment User] Create Success' || \r\n        action.type === '[Investment User] Delete Success'\r\n      ){\r\n        this.getAllData(true);\r\n      }\r\n\r\n      if(action.type === '[Investment User] Reset Filters Investments'){\r\n        this.params = {};\r\n        this.getAllData(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  async ngOnInit() {\r\n    if(Object.keys(this.params).length){\r\n      this.store.dispatch(SetFiltersInvestmentsInitial({filters: this.params, ref: 'initial start 999999999999' }));\r\n      this.validationInitial = true;\r\n      await this.storeSrv.investmentsByDate(this.params, 'onInitSTART INVESTMENTS1');\r\n    }\r\n    this.getAllData();\r\n    await this.storeSrv.getCategoriesInvestments();\r\n  }\r\n  \r\n  async getAllData(reload: boolean = false) {\r\n    if(Object.keys(this.params).length > 1 && !reload){\r\n      return;\r\n    }\r\n    await this.storeSrv.investmentsByDate(this.params, 'onInitSTART INVESTMENTS');\r\n    await this.storeSrv.getAllDataInvestments();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subP.unsubscribe();\r\n    this.susA.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-create-investment',\r\n  templateUrl: './create-investment.component.html'\r\n})\r\nexport class CreateInvestmentComponent {\r\n}\r\n","<div class=\"container pt-5 mx-auto\">\r\n  <div class=\"grid gap-4\">\r\n    <div>\r\n      <app-form-investments class=\"form-general\"></app-form-investments>\r\n    </div>\r\n  </div>\r\n</div>","<app-create-investment></app-create-investment>\r\n\r\n<ng-container *ngIf=\"(investments$ | async) as investments\">\r\n  <div class=\"container pt-5 mx-auto\" *ngIf=\"investments?.data as data\">\r\n    <div class=\"grid gap-4\">\r\n      <form [formGroup]=\"form\">\r\n        <app-investments-filters [form]=\"form\" [isFromCreate]=\"true\"></app-investments-filters>\r\n      </form>\r\n\r\n      <div *ngIf=\"data?.length && loaded\">\r\n        <span class=\"cursor-pointer font-semibold hover:font-bold\" (click)=\"toggleChart()\">\r\n          <span *ngIf=\"(showChart$ | async)\">- Hide</span>\r\n          <span *ngIf=\"!(showChart$ | async)\">+ Show</span> Chart\r\n        </span>\r\n      </div>\r\n\r\n      <ng-container *ngIf=\"loaded\">\r\n        <div class=\"\" *ngIf=\"!form.controls.filter.value && (showChart$ | async)\">\r\n          <app-line *ngIf=\"dataGraphics?.length\" \r\n            [dataGraphics]=\"dataGraphics\"\r\n            [nameLegend]=\"'All Time Investments'\"\r\n            [nameAvg]=\"'Average All'\"\r\n            [title]=\"{\r\n              text: 'All Investments',\r\n              align: 'center'\r\n            }\"\r\n          ></app-line>\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n          <ng-template [ngTemplateOutlet]=\"tree\"></ng-template>\r\n        </div>\r\n  \r\n        <div class=\"\" *ngIf=\"form.controls.filter.value === 'month' && form.controls.month.value && (showChart$ | async)\">\r\n          <app-line *ngIf=\"dataGraphics?.length\" \r\n            [dataGraphics]=\"dataGraphics\"\r\n            [type]=\"'month'\"\r\n            [nameLegend]=\"'Month Investments'\"\r\n            [nameAvg]=\"'Average Month'\"\r\n            [title]=\"{\r\n              text: 'Month Investments',\r\n              align: 'center'\r\n            }\"\r\n          ></app-line>\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n          <ng-template [ngTemplateOutlet]=\"tree\"></ng-template>\r\n        </div>\r\n  \r\n        <div class=\"\" *ngIf=\"form.controls.filter.value === 'year' && form.controls.year.value && (showChart$ | async)\">\r\n          <app-line *ngIf=\"dataGraphics?.length\" \r\n            [dataGraphics]=\"dataGraphics\"\r\n            [type]=\"'year'\"\r\n            [nameLegend]=\"'Year Investments'\"\r\n            [nameAvg]=\"'Average Year'\"\r\n            [xAxis]=\"{}\"\r\n            [title]=\"{\r\n              text: 'Year Investments',\r\n              align: 'center'\r\n            }\"\r\n          ></app-line>\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n          <ng-template [ngTemplateOutlet]=\"tree\"></ng-template>\r\n        </div>\r\n\r\n        <div class=\"\" *ngIf=\"form.controls.filter.value === 'date' && form.controls.date.value && (showChart$ | async)\">\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n          <ng-template [ngTemplateOutlet]=\"tree\"></ng-template>\r\n        </div>\r\n\r\n        <div class=\"\" *ngIf=\"form.controls.filter.value === 'dates' && form.controls.date1.value && form.controls.date2.value && (showChart$ | async)\">\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n          <ng-template [ngTemplateOutlet]=\"tree\"></ng-template>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"\">\r\n        <app-investments-person  \r\n          [showHeader]=\"false\" \r\n          [showLink]=\"false\" \r\n          [padding]=\"false\"\r\n          [showDelete]=\"true\"></app-investments-person>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #tree>\r\n  <div id=\"chart\" *ngIf=\"chartOptionsMonth4?.series\">\r\n    <apx-chart\r\n      [series]=\"chartOptionsMonth4?.series\"\r\n      [chart]=\"chartOptionsMonth4?.chart\"\r\n      [dataLabels]=\"chartOptionsMonth4?.dataLabels\"\r\n      [grid]=\"chartOptionsMonth4?.grid\"\r\n      [stroke]=\"chartOptionsMonth4?.stroke\"\r\n      [title]=\"chartOptionsMonth4?.title\"\r\n      [plotOptions]=\"chartOptionsMonth4?.plotOptions\"\r\n      [colors]=\"chartOptionsMonth4?.colors\"\r\n    ></apx-chart>\r\n  </div>\r\n</ng-template>\r\n<ng-template #donuts >\r\n  <div class=\"grid grid-cols-2\">\r\n    <app-donut *ngIf=\"dataGraphics?.length\" \r\n      [dataGraphics]=\"dataGraphics\"\r\n      [nameLegend]=\"'investment'\"\r\n      [type]=\"'categoryinvestments'\"\r\n      [title]=\"{\r\n        text: 'Year Category',\r\n        align: 'center'\r\n      }\"\r\n      ></app-donut>\r\n\r\n    <app-donut *ngIf=\"dataGraphics?.length\" \r\n      [dataGraphics]=\"dataGraphics\"\r\n      [type]=\"'account'\"\r\n      [title]=\"{\r\n        text: 'Year Category',\r\n        align: 'center'\r\n      }\"\r\n      ></app-donut>\r\n  </div>\r\n</ng-template>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { IAccount } from 'src/app/interfaces/accounts';\r\nimport { ICategoryExpense } from 'src/app/interfaces/categories_expenses';\r\nimport { IStoreInvestments } from 'src/app/interfaces/investments';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { IState } from 'src/app/store';\r\nimport { monthsNames } from 'src/environments/global';\r\nimport { UtilsInvestmentsService } from './services/utils-investments.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SetShowChartFiltersInvestments } from 'src/app/store/actions/investments.actions';\r\n\r\n@Component({\r\n  selector: 'app-investments',\r\n  templateUrl: './investments.component.html',\r\n})\r\nexport class InvestmentsComponent implements OnInit, OnDestroy {\r\n  public chartOptionsMonth2: any;\r\n  public chartOptionsMonth3: any;\r\n  public chartOptionsMonth4: any;\r\n  public chartOptionsYear2: any;\r\n\r\n  showChart$: Observable<boolean> = this.store.select((state) => state?.investments?.filters?.showChart);\r\n  investments$: Observable<IStoreInvestments> = this.store.select((state) => state.investments);\r\n\r\n  user: IUserData = {};\r\n  form: FormGroup = new FormGroup({});\r\n\r\n  categories: Observable<ICategoryExpense[]> = this.store.select(state => state.categories_investments.data);\r\n  methods: Observable<IAccount[]> = this.store.select(state => state.user.data.accounts);\r\n\r\n  queryParams: any;\r\n\r\n  loading: boolean = false;\r\n  loaded: boolean = false;\r\n\r\n  dataGraphicMonth2: any = [];\r\n  dataGraphicMonth3: any = [];\r\n  dataGraphicMonth4: any = [];\r\n  dataGraphicYear2: any = [];\r\n\r\n  dataGraphics: any = [];\r\n\r\n  sub: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private store: Store<IState>,\r\n    private activatedRoute: ActivatedRoute,\r\n    private utils: UtilsInvestmentsService\r\n  ) {\r\n    this.buildForm();\r\n\r\n    this.sub = this.store.select(state => state).subscribe(data => {\r\n      try {\r\n        // console.log(data)\r\n        this.loading = data?.investments?.loading;\r\n        this.loaded = data?.investments?.loaded;\r\n        this.user = data?.user?.data;\r\n        this.queryParams = data?.investments?.filters;\r\n\r\n        if(!data?.investments?.data) return;\r\n        const dataGraphics: any = [{}, ...data?.investments?.complete];\r\n        this.dataGraphics = [{}, ...data?.investments?.complete];\r\n        if(!this.form?.value?.filter){\r\n          this.dataGraphicMonth2 = this.generateDataGraphicMonth2(dataGraphics);\r\n          this.dataGraphicMonth3 = this.generateDataGraphicMonth3(dataGraphics);\r\n          this.dataGraphicMonth4 = this.generateDataGraphicMonth2(dataGraphics);\r\n\r\n          this.chartOptionsMonth2 = this.dataChartMonth2();\r\n          this.chartOptionsMonth3 = this.dataChartMonth2(true);\r\n          this.chartOptionsMonth4 = this.dataChartMonth4();\r\n        }\r\n        if(this.form?.value?.filter === 'month' && this.form?.value?.month){\r\n          this.dataGraphicMonth2 = this.generateDataGraphicMonth2(dataGraphics);\r\n          this.dataGraphicMonth3 = this.generateDataGraphicMonth3(dataGraphics);\r\n          this.dataGraphicMonth4 = this.generateDataGraphicMonth2(dataGraphics);\r\n\r\n          this.chartOptionsMonth2 = this.dataChartMonth2();\r\n          this.chartOptionsMonth3 = this.dataChartMonth2(true);\r\n          this.chartOptionsMonth4 = this.dataChartMonth4();\r\n        }\r\n        if(this.form?.value?.filter === 'year' && this.form?.value?.year){\r\n          this.dataGraphicYear2 = this.generateDataGraphicYear2(dataGraphics);\r\n          this.chartOptionsYear2 = this.dataChartYear2();\r\n\r\n          this.dataGraphicMonth2 = this.generateDataGraphicMonth2(dataGraphics);\r\n          this.dataGraphicMonth3 = this.generateDataGraphicMonth3(dataGraphics);\r\n\r\n          this.chartOptionsMonth2 = this.dataChartMonth2();\r\n          this.chartOptionsMonth3 = this.dataChartMonth2(true);\r\n\r\n          this.dataGraphicMonth4 = this.generateDataGraphicMonth2(dataGraphics);\r\n          this.chartOptionsMonth4 = this.dataChartMonth4();\r\n        }\r\n        if(this.form?.value?.filter === 'date' && this.form?.value?.date){\r\n          this.dataGraphicMonth2 = this.generateDataGraphicMonth2(dataGraphics);\r\n          this.dataGraphicMonth3 = this.generateDataGraphicMonth3(dataGraphics);\r\n\r\n          this.chartOptionsMonth2 = this.dataChartMonth2();\r\n          this.chartOptionsMonth3 = this.dataChartMonth2(true);\r\n\r\n          this.dataGraphicMonth4 = this.generateDataGraphicMonth2(dataGraphics);\r\n          this.chartOptionsMonth4 = this.dataChartMonth4();\r\n        }\r\n        if(this.form?.value?.filter === 'dates' && this.form?.value?.date1 && this.form?.value?.date2){\r\n          this.dataGraphicMonth2 = this.generateDataGraphicMonth2(dataGraphics);\r\n          this.dataGraphicMonth3 = this.generateDataGraphicMonth3(dataGraphics);\r\n\r\n          this.chartOptionsMonth2 = this.dataChartMonth2();\r\n          this.chartOptionsMonth3 = this.dataChartMonth2(true);\r\n\r\n          this.dataGraphicMonth4 = this.generateDataGraphicMonth2(dataGraphics);\r\n          this.chartOptionsMonth4 = this.dataChartMonth4();\r\n        }\r\n      } catch (error) { console.log(error); }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  buildForm(){\r\n    this.form = this.utils.form();\r\n  }\r\n\r\n  dataChartYear2(){\r\n    return {\r\n      series: [{\r\n        name: 'Investments', \r\n        data: this.dataGraphicYear2\r\n      }],\r\n      chart: {\r\n        height: 400,\r\n        type: \"line\",\r\n        zoom: {\r\n          enabled: true\r\n        }\r\n      },\r\n      dataLabels: {\r\n        enabled: true,\r\n        formatter: (val: number): string => '' + new Intl.NumberFormat().format(val)\r\n      },\r\n      stroke: {\r\n        curve: 'straight',\r\n        width: 2\r\n      },\r\n      title: {\r\n        text: \"Investments by Year\",\r\n        align: \"center\"\r\n      },\r\n      grid: {\r\n        show: true,\r\n        borderColor: '#ddd',\r\n        yaxis: {\r\n          lines: {\r\n            show: true\r\n          }\r\n        },\r\n        xaxis: {\r\n          lines: {\r\n            show: true\r\n          }\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  dataChartMonth2(isPaymethod?: boolean){\r\n    const value = !isPaymethod ? this.dataGraphicMonth2 : this.dataGraphicMonth3\r\n\r\n    return {\r\n      series: value.map((i: any) => i.y),\r\n      chart: {\r\n        height: 400,\r\n        type: \"pie\",\r\n        zoom: {\r\n          enabled: true\r\n        },\r\n        toolbar: {\r\n          show: true\r\n        },\r\n      },\r\n      labels: value.map((i: any) => i.x +' - $'+new Intl.NumberFormat().format(i.y)),\r\n      plotOptions: {\r\n        pie: {\r\n          donut: {\r\n            labels: {\r\n              show: true,\r\n              total: {\r\n                showAlways: true,\r\n                show: true\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      title: {\r\n        show: true,\r\n        text: \"Investments by Month\"\r\n      },\r\n      tooltip: {\r\n        theme: \"dark\",\r\n        x: {\r\n          // show: false\r\n        },\r\n        y: {\r\n          title: {\r\n            formatter: (val: any) => {\r\n              console.log(val);\r\n              return \"\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  dataChartMonth4(){\r\n    return {\r\n      series: [{\r\n        data: this.dataGraphicMonth2\r\n      }],\r\n      chart: {\r\n        height: 500,\r\n        type: \"treemap\"\r\n      },\r\n      colors: [\r\n        \"#3B93A5\",\r\n        \"#F7B844\",\r\n        \"#ADD8C7\",\r\n        \"#EC3C65\",\r\n        \"#CDD7B6\",\r\n        \"#C1F666\",\r\n        \"#D43F97\",\r\n        \"#1E5D8C\",\r\n        \"#421243\",\r\n        \"#7F94B0\",\r\n        \"#EF6537\",\r\n        \"#C0ADDB\"\r\n      ],\r\n      plotOptions: {\r\n        treemap: {\r\n          distributed: true,\r\n          enableShades: false\r\n        }\r\n      },\r\n      // dataLabels: {\r\n      //   enabled: true,\r\n      //   formatter: (val: number): string => '' + new Intl.NumberFormat().format(val)\r\n      // },\r\n      title: {\r\n        text: \"Investments by Month\",\r\n        align: \"center\"\r\n      }\r\n    };\r\n  }\r\n\r\n  generateDataGraphicYear2(data: any) {\r\n    if(!data.length) return [];\r\n\r\n    // sort data\r\n    data = [...data.sort((objA: any, objB: any) => Number(new Date(objA.date)) - Number(new Date(objB.date)))];\r\n\r\n    let dataForReduce = [...data];\r\n    var resultado: any = [];\r\n    var months: string[] = monthsNames;\r\n    dataForReduce.reduce((res: any, value: any) => {\r\n      // console.log(res, value);\r\n      let pD = value.date.split('-');\r\n      let month: any = new Date(`${pD[1]}-${pD[2]}-${pD[0]}`).toLocaleDateString();\r\n      // let month: any = value.category_investment.name;\r\n      // let month: any = value.account?.name;\r\n\r\n      // console.warn('month =>> ', month, value.date);\r\n      if (!res[month]) {\r\n        res[month] = {month};\r\n\r\n        // Inicializamos a 0 el valor de cada key\r\n        Object.keys(value).forEach(function(key) {\r\n            if(key != 'date'){\r\n              res[month][key] = 0;\r\n            }\r\n        })\r\n\r\n        resultado.push(res[month]);\r\n      }\r\n\r\n      // Sumamos el valor de cada clave dentro de un bucle\r\n      Object.keys(value).forEach(function(key) {\r\n        if(key != 'date'){\r\n          res[month][key] += value[key];\r\n        }\r\n      })\r\n\r\n      return res;\r\n    });\r\n    const values = resultado.map((expensive: any) => {\r\n      return {\r\n        x: expensive.month,\r\n        y: expensive.value\r\n      };\r\n    });\r\n    // console.log(values);\r\n    return values;\r\n  }\r\n\r\n  generateDataGraphicMonth2(data: any) {\r\n    if(!data.length) return [];\r\n\r\n    // sort data\r\n    data = [...data.sort((objA: any, objB: any) => Number(new Date(objA.date)) - Number(new Date(objB.date)))]\r\n\r\n    let dataForReduce = [...data];\r\n    var resultado: any = [];\r\n    dataForReduce.reduce((res: any, value: any) => {\r\n      // console.log(res, value);\r\n      let dia = value.category_investment.name;\r\n      if (!res[dia]) {\r\n        res[dia] = {dia};\r\n\r\n        // Inicializamos a 0 el valor de cada key\r\n        Object.keys(value).forEach(function(key) {\r\n            if(key != 'date'){\r\n              res[dia][key] = 0;\r\n            }\r\n        })\r\n\r\n        resultado.push(res[dia]);\r\n      }\r\n\r\n      // Sumamos el valor de cada clave dentro de un bucle\r\n      Object.keys(value).forEach(function(key) {\r\n        if(key != 'date'){\r\n          res[dia][key] += value[key];\r\n        }\r\n      })\r\n\r\n      return res;\r\n    });\r\n    const values = resultado.map((expensive: any) => {\r\n      return {\r\n        x: expensive.dia,\r\n        y: expensive.value\r\n      };\r\n    });\r\n    // console.log(values);\r\n    return values;\r\n  }\r\n\r\n  generateDataGraphicMonth3(data: any) {\r\n    if(!data.length) return [];\r\n\r\n    // sort data\r\n    data = [...data.sort((objA: any, objB: any) => Number(new Date(objA.date)) - Number(new Date(objB.date)))]\r\n\r\n    let dataForReduce = [...data];\r\n    var resultado: any = [];\r\n    dataForReduce.reduce((res: any, value: any) => {\r\n      // console.log(res, value);\r\n      let dia = value.account?.name;\r\n      if (!res[dia]) {\r\n        res[dia] = {dia};\r\n\r\n        // Inicializamos a 0 el valor de cada key\r\n        Object.keys(value).forEach(function(key) {\r\n            if(key != 'date'){\r\n              res[dia][key] = 0;\r\n            }\r\n        })\r\n\r\n        resultado.push(res[dia]);\r\n      }\r\n\r\n      // Sumamos el valor de cada clave dentro de un bucle\r\n      Object.keys(value).forEach(function(key) {\r\n        if(key != 'date'){\r\n          res[dia][key] += value[key];\r\n        }\r\n      })\r\n\r\n      return res;\r\n    });\r\n    const values = resultado.map((expensive: any) => {\r\n      return {\r\n        x: expensive.dia,\r\n        y: expensive.value\r\n      };\r\n    });\r\n    // console.log(values);\r\n    return values;\r\n  }\r\n\r\n  toggleChart(): void{\r\n    this.store.dispatch(SetShowChartFiltersInvestments());\r\n    this.utils.createUrl({...this.queryParams}, this.activatedRoute, 'toggleChart()');\r\n  }\r\n}\r\n","<div class=\"container mt-8 mx-auto\" *ngIf=\"inversion?.id\">  \r\n  <div class=\"grid gap-4\" *ngIf=\"inversion?.id\">\r\n    <app-item-investment [showDelete]=\"true\" [item]=\"inversion\" [link]=\"false\" [complete]=\"true\"></app-item-investment>\r\n  </div>\r\n\r\n  <!-- <pre>{{ inversionHistory | json }}</pre> -->\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { InvestmentsService } from 'src/app/services/investments.service';\r\n\r\n@Component({\r\n  selector: 'app-detail-investment',\r\n  templateUrl: './detail-investment.component.html'\r\n})\r\nexport class DetailInvestmentComponent implements OnInit {\r\n  id: number = 0;\r\n  susP: Subscription = new Subscription();\r\n\r\n  inversion: any = [];\r\n  inversionHistory: any = [];\r\n  total: number = 0;\r\n\r\n  constructor(private investmentService: InvestmentsService,   private route: ActivatedRoute) {\r\n    this.susP = this.route.params.subscribe(params => {\r\n      this.id = params.id;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.susP.unsubscribe();\r\n  }\r\n\r\n  async ngOnInit() {\r\n    await this.getDataInvestment();\r\n    await this.getDataInvestmentHistory();\r\n  }\r\n\r\n  async getDataInvestment(): Promise<void>{\r\n    try {\r\n      let response: any = await this.investmentService.getDataInvestment(this.id);\r\n\r\n      console.log(response);\r\n\r\n      if (Object.keys(response).length) {\r\n        this.inversion = response;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  \r\n  async getDataInvestmentHistory(): Promise<void>{\r\n    try {\r\n      let response: any = await this.investmentService.getDataInvestmentHistory(this.inversion.id);\r\n\r\n      console.log(response);\r\n\r\n      if (Object.keys(response).length) {\r\n        this.inversionHistory = response;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ICategoryEarning } from 'src/app/interfaces/categories_earnings';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { InvestmentsService } from 'src/app/services/investments.service';\r\nimport { IState } from 'src/app/store';\r\nimport { CategoriesInvestments } from 'src/app/store/actions/categories_investments';\r\n\r\n@Component({\r\n  selector: 'app-create-investment-category',\r\n  templateUrl: './create-investment-category.component.html',\r\n  styles: [\r\n  ]\r\n})\r\nexport class CreateInvestmentCategoryComponent implements OnInit {\r\n  form: FormGroup = new FormGroup({});\r\n\r\n  sus: Subscription = new Subscription();\r\n  user: IUserData = {};\r\n\r\n  categories: Observable<any[]> = this.store.select(state => state.categories_investments.data);\r\n\r\n  constructor(\r\n    private investmentService: InvestmentsService, \r\n    private store: Store<IState>\r\n  ) { \r\n    this.sus = this.store.subscribe((state) => {\r\n      this.user = state.user.data;\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = new FormGroup({\r\n      category: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sus.unsubscribe();\r\n  }\r\n\r\n  async createInvestmentCategory(){\r\n    \r\n    if(this.form.valid){\r\n      let { category } = this.form.controls;\r\n\r\n      try {\r\n        let data = {\r\n          category: category.value,\r\n          person: this.user?.person?.id\r\n        };\r\n        let response: any = await this.investmentService.createCategoryInvestment(data);\r\n\r\n        if(response.category){\r\n          console.log('registro exitoso', response);\r\n          this.form.reset();\r\n          this.store.dispatch(CategoriesInvestments({any: response.categories}));\r\n        }else{\r\n          console.log('registro fallido');\r\n        }\r\n      } catch (error) {\r\n        console.log('error => ', error);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  async deleteCategory(item: ICategoryEarning){\r\n    // return;\r\n    if(item.id){\r\n      try {\r\n        let data = {\r\n          category: item.id,\r\n          person: item.id_person\r\n        };\r\n        let response: any = await this.investmentService.deleteCategorieInvestment(data);\r\n\r\n        if(response.category){\r\n          console.log('category eliminada exitosamente');\r\n          this.form.reset();\r\n          this.store.dispatch(CategoriesInvestments({any: response.categories}));\r\n        }else{\r\n          console.log('category eliminada fallida');\r\n        }\r\n      } catch (error) {\r\n        console.log('error => ', error);\r\n      }\r\n\r\n    }\r\n  }\r\n}","<div class=\"container pt-5 mx-auto\">\r\n  <div class=\"grid grid-cols-2 gap-4\">\r\n    <div>\r\n\r\n      <div class=\"container pt-5 mx-auto\">\r\n        <h1 class=\"text-center font-bold text-2xl mt-7 mb-5\"><span class=\"icon-handshake-o mr-1\"></span> Create Investment Category</h1>\r\n\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"createInvestmentCategory()\">\r\n          <div class=\"w-full\">\r\n            <input type=\"text\" placeholder=\"Investment Category Name\" formControlName=\"category\" class=\"w-full p-2 mb-2\">\r\n          </div>\r\n          <div class=\"w-full\">\r\n            <button type=\"submit\" class=\"btn-form\">Create</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <div>\r\n      <app-list-categories-investments [padding]=\"false\"></app-list-categories-investments>\r\n    </div>\r\n  </div>\r\n</div>","<div class=\"search-wrap pt-8 px-6 h-full\">\r\n  <div class=\"search-header\">\r\n    <h4 class=\"main-text flex justify-between\">\r\n      <span>\r\n        Have <b class=\"main-label\">{{ quantity }}</b> investments with this category <b class=\"main-label\">{{ category?.name }}</b>, by total of <b class=\"main-label\">{{ total  | currency:'$':'symbol':'4.0' }}</b>\r\n      </span>\r\n\r\n      <div class=\"flex gap-2\">\r\n        <!-- Filters -->\r\n        <select class=\"pb-1\" [(ngModel)]=\"id\" (change)=\"seeByCategory()\">\r\n          <option [value]=\"'create'\" *ngIf=\"!(categories$ | async)?.length\" class=\"text-blue-400\">Create one</option>\r\n          <option [value]=\"item.id\" *ngFor=\"let item of (categories$ | async)\">{{ item.name }}</option>\r\n        </select>\r\n\r\n        <select [(ngModel)]=\"limit\" (change)=\"ngOnInit(true)\">\r\n          <option value=\"12\">12</option>\r\n          <option value=\"20\">20</option>\r\n          <option value=\"24\">24</option>\r\n          <option value=\"36\">36</option>\r\n          <option value=\"48\">48</option>\r\n          <option value=\"60\">60</option>\r\n          <option value=\"100\">100</option>\r\n        </select>\r\n      </div>\r\n    </h4>\r\n  </div>\r\n  <div class=\"search-content overflow-auto\">\r\n    <div class=\"grid xl:grid-cols-4 md:grid-cols-3 grid-cols-2 gap-4\" *ngIf=\"investments && investments.length\">\r\n      <ng-container *ngFor=\"let item of investments;let i = index\">\r\n        <app-item-investment [showDelete]=\"false\" [item]=\"item\"></app-item-investment>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"alert p-2\" *ngIf=\"investments && !investments.length\">\r\n      There're not investments for this category {{category?.name}}, create one <a [routerLink]=\"'/dashboard/investments'\">here</a>\r\n    </div>\r\n  </div>\r\n  <div class=\"search-footer\">\r\n    <div class=\"alert pt-3\" *ngIf=\"investments && investments.length\">\r\n      <a class=\"main-btn\" [routerLink]=\"'/dashboard/investments/create'\"><span class=\"icon-coin-dollar mr-1\"></span> Create investment</a>\r\n    </div>\r\n    <div class=\"pagetor inline-flex justify-end items-end relative -top-4 text-sm fr\">\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"prev()\" *ngIf=\"(page + 1) > 1\"><</button>\r\n      <span class=\"p-1 bg-gray-900 text-white\">\r\n        Showing \r\n        <span *ngIf=\"limit * (page + 1) < quantity\">{{ limit * (page+1) }}</span>\r\n        <span *ngIf=\"limit * (page + 1) > quantity\">{{quantity}}</span> \r\n        of {{ quantity }} Registers | Page: \r\n        <select class=\"text-black\" [(ngModel)]=\"pageA\" (change)=\"setPage()\">\r\n          <option *ngFor=\"let item of pagesArray\" [value]=\"item\">{{item + 1}}</option>\r\n        </select>/{{ pages }}\r\n      </span>\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"next()\" *ngIf=\"page + 1 < pages\">></button>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ICategoryInvestment } from 'src/app/interfaces/categories_investments';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { InvestmentsService } from 'src/app/services/investments.service';\r\nimport { IState } from 'src/app/store';\r\n\r\n@Component({\r\n  templateUrl: './detail-investment-category.component.html',\r\n  selector: 'app-detail-investment-category',\r\n})\r\nexport class DetailInvestmentCategoryComponent implements OnInit, OnDestroy {\r\n  id: number = 0;\r\n  user: IUserData = {};\r\n  susP: Subscription = new Subscription();\r\n  sus: Subscription = new Subscription();\r\n\r\n  investments: any = [];\r\n  category: any = [];\r\n  total: number = 0;\r\n  quantity: number = 0;\r\n  page: number = 0;\r\n  pageA: any = 0;\r\n  pages: number = 0;\r\n  pagesArray: any[] = [];\r\n  limit: number = 24;\r\n\r\n  categories$: Observable<ICategoryInvestment[]> = this.store.select((state) => state.categories_investments.data);\r\n\r\n  constructor(\r\n    private store: Store<IState>, \r\n    private investmentService: InvestmentsService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.susP = this.route.params.subscribe(params => {\r\n      this.id = params.id;\r\n    });\r\n    this.sus = this.store.select(state => state.user).subscribe(user => {\r\n      // console.warn(user);\r\n      this.user = user.data;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.susP.unsubscribe();\r\n    this.sus.unsubscribe();\r\n  }\r\n\r\n  async ngOnInit(reload?: boolean) {\r\n    try {     \r\n      if(reload){\r\n        this.pageA = 0;\r\n        this.page = 0;\r\n        this.pages = 0;\r\n        this.quantity = 0;\r\n        this.total = 0;\r\n        this.investments = [];\r\n      }\r\n\r\n      const params: any = {\r\n        category: this.id, \r\n        person: this.user.id,\r\n        page: this.page,\r\n        limit: this.limit,\r\n      };\r\n\r\n      let response: any = await this.investmentService.getInvestmentsByCategory(params);\r\n\r\n      console.log(response);\r\n\r\n      if (response.category) {\r\n        this.category = response.category\r\n      }\r\n      if (response.investments) {\r\n        this.investments = response.investments.rows;\r\n      }\r\n      if (response.total) {\r\n        this.total = response.total;\r\n      }\r\n      if (response.quantity) {\r\n        this.quantity = response.quantity;\r\n      }\r\n      if (response.pages) {\r\n        this.pages = response.pages;\r\n        this.pagesArray = [];\r\n        for (let i = 0; i < this.pages; i++) {\r\n          this.pagesArray.push(i);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  setPage(): void {\r\n    this.page = parseInt(this.pageA);\r\n    this.ngOnInit();\r\n  }\r\n\r\n  next(): void {\r\n    this.page++;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  prev(): void {\r\n    this.page--;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  seeByCategory(){\r\n    this.router.navigateByUrl(`/dashboard/investments/by-category/${this.id}`);\r\n    this.ngOnInit(true);\r\n  }\r\n\r\n}\r\n","<div class=\"px-6 py-5\">\r\n  <form [formGroup]=\"form\">\r\n    <app-investments-filters [form]=\"form\" [isFromGraphics]=\"true\"></app-investments-filters>\r\n  </form>\r\n\r\n  <ng-container *ngIf=\"loaded\">\r\n    <div *ngIf=\"!form?.controls?.filter?.value\">\r\n      <app-line *ngIf=\"dataGraphics?.length\" \r\n        [dataGraphics]=\"dataGraphics\"\r\n        [nameLegend]=\"'All Time Investments'\"\r\n        [nameAvg]=\"'Average All'\"\r\n        [title]=\"{\r\n          text: 'All Investments',\r\n          align: 'center'\r\n        }\"\r\n      ></app-line>\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n\r\n    <div *ngIf=\"form.controls.filter.value === 'month' && form.controls.month.value\">\r\n      <app-line *ngIf=\"dataGraphics?.length\" \r\n            [dataGraphics]=\"dataGraphics\"\r\n            [type]=\"'month'\"\r\n            [nameLegend]=\"'Month Investments'\"\r\n            [nameAvg]=\"'Average Month'\"\r\n            [title]=\"{\r\n              text: 'Month Investments',\r\n              align: 'center'\r\n            }\"\r\n          ></app-line>\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n\r\n    <div *ngIf=\"form.controls.filter.value === 'year' && form.controls.year.value\">\r\n      <app-line *ngIf=\"dataGraphics?.length\" \r\n            [dataGraphics]=\"dataGraphics\"\r\n            [type]=\"'year'\"\r\n            [nameLegend]=\"'Year Investments'\"\r\n            [nameAvg]=\"'Average Year'\"\r\n            [xAxis]=\"{}\"\r\n            [title]=\"{\r\n              text: 'Year Investments',\r\n              align: 'center'\r\n            }\"\r\n          ></app-line>\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n\r\n    <div *ngIf=\"form.controls.filter.value === 'date' && form.controls.date.value\">\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n\r\n    <div *ngIf=\"form.controls.filter.value === 'dates' && form.controls.date1.value && form.controls.date2.value\">\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-template #donuts >\r\n  <div class=\"grid grid-cols-2\">\r\n    <app-donut *ngIf=\"dataGraphics?.length\" \r\n      [dataGraphics]=\"dataGraphics\"\r\n      [nameLegend]=\"'investment'\"\r\n      [type]=\"'categoryinvestments'\"\r\n      [title]=\"{\r\n        text: 'Year Category',\r\n        align: 'center'\r\n      }\"\r\n      ></app-donut>\r\n\r\n    <app-donut *ngIf=\"dataGraphics?.length\" \r\n      [dataGraphics]=\"dataGraphics\"\r\n      [type]=\"'account'\"\r\n      [title]=\"{\r\n        text: 'Year Category',\r\n        align: 'center'\r\n      }\"\r\n      ></app-donut>\r\n  </div>\r\n</ng-template>\r\n","import { RouterModule, Routes } from \"@angular/router\";\r\nimport { StartInvestmentsComponent } from \"./start-investments/start-investments.component\";\r\nimport { DashboardService } from \"src/app/guards/dashboard.service\";\r\nimport { InvestmentsComponent } from \"./investments.component\";\r\nimport { DetailInvestmentComponent } from \"./detail/detail-investment.component\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { CreateInvestmentCategoryComponent } from \"./investment-category/create/create-investment-category.component\";\r\nimport { DetailInvestmentCategoryComponent } from \"./investment-category/detail/detail-investment-category.component\";\r\nimport { ListCategoriesInvestmentsComponent } from \"./investment-category/list/list.component\";\r\nimport { HomeInvestmentsComponent } from \"./home/home-investments.component\";\r\nimport { GraphicsInvestmentsComponent } from \"./graphics/graphics-investments.component\";\r\n\r\nconst routes: Routes = [\r\n    { \r\n        path: '', component: StartInvestmentsComponent, canActivate: [DashboardService],\r\n        children: [\r\n            { path: '', component: HomeInvestmentsComponent },\r\n            { path: 'create', component: InvestmentsComponent },\r\n            { path: 'graphics', component: GraphicsInvestmentsComponent },\r\n            { path: ':id/details', component: DetailInvestmentComponent },\r\n\r\n            { path: 'categories', component: ListCategoriesInvestmentsComponent },\r\n            { path: 'categories/create', component: CreateInvestmentCategoryComponent },\r\n            { path: 'by-category/:id', component: DetailInvestmentCategoryComponent },\r\n        ]\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n  })\r\n  export class InvestmentsRoutingModule { }","import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { UtilsInvestmentsService } from '../services/utils-investments.service';\n\n@Component({\n  selector: 'app-home-investments',\n  templateUrl: './home-investments.component.html'\n})\nexport class HomeInvestmentsComponent implements OnInit {\n  form: FormGroup = new FormGroup({});\n\n  constructor(private utilsInvestments: UtilsInvestmentsService) { }\n\n  ngOnInit() {\n    this.buildForm();\n  }\n\n  buildForm(){\n    this.form = this.utilsInvestments.form();\n  }\n\n}\n","<div class=\"px-6 py-5\">\n  <form [formGroup]=\"form\">\n    <app-investments-filters [form]=\"form\"></app-investments-filters>\n  </form>\n\n  <app-investments-person \n    [showHeader]=\"false\" \n    [showLink]=\"false\" \n    [showDelete]=\"true\" \n    [padding]=\"false\"></app-investments-person>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { IState } from 'src/app/store';\r\nimport { Store } from '@ngrx/store';\r\nimport { UtilsInvestmentsService } from '../services/utils-investments.service';\r\n\r\n@Component({\r\n  selector: 'app-graphics-investments',\r\n  templateUrl: './graphics-investments.component.html'\r\n})\r\nexport class GraphicsInvestmentsComponent implements OnInit {\r\n  form: FormGroup = new FormGroup({});\r\n\r\n  loading: boolean = false;\r\n  loaded: boolean = false;\r\n  dataGraphics: any = [];\r\n\r\n  sub: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private utils: UtilsInvestmentsService,\r\n    private store: Store<IState>,\r\n  ) {\r\n    this.sub = this.store.select(state => state).subscribe(data => {\r\n      try {\r\n        this.loading = data?.investments?.loading;\r\n        this.loaded = data?.investments?.loaded;\r\n\r\n        this.dataGraphics = [{}, ...data?.investments?.complete];\r\n      } catch (error) { console.log(error); }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(){\r\n    this.form = this.utils.form();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InvestmentsRoutingModule } from './investments-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { StartInvestmentsComponent } from './start-investments/start-investments.component';\r\nimport { CreateInvestmentComponent } from './create/create-investment.component';\r\nimport { DetailInvestmentComponent } from './detail/detail-investment.component';\r\nimport { SharedModule } from 'src/app/components/shared.module';\r\nimport { NgApexchartsModule } from 'ng-apexcharts';\r\nimport { InvestmentsComponent } from './investments.component';\r\nimport { CreateInvestmentCategoryComponent } from './investment-category/create/create-investment-category.component';\r\nimport { DetailInvestmentCategoryComponent } from './investment-category/detail/detail-investment-category.component';\r\nimport { HomeInvestmentsComponent } from './home/home-investments.component';\r\nimport { GraphicsInvestmentsComponent } from './graphics/graphics-investments.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    StartInvestmentsComponent,\r\n    InvestmentsComponent,\r\n    CreateInvestmentComponent,\r\n    DetailInvestmentComponent,\r\n    CreateInvestmentCategoryComponent,\r\n    DetailInvestmentCategoryComponent,\r\n    HomeInvestmentsComponent,\r\n    GraphicsInvestmentsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgSelectModule,\r\n    NgApexchartsModule,\r\n    InvestmentsRoutingModule,\r\n    SharedModule,\r\n  ]\r\n})\r\nexport class InvestmentsModule { }\r\n"],"sourceRoot":"webpack:///","file":"719.0cc1510f022dec88f982.js"}