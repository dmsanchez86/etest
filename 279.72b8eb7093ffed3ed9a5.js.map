{"version":3,"mappings":"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","names":["D","constructor","ngOnInit","o","selectors","n","B","t","e","c","this","s","d","sus","store","subscribe","a","user","data","buildForm","form","name","credit","order","ngOnDestroy","unsubscribe","createPaymentMethod","valid","controls","_","value","u","Z","person","id","m","userService","createPayMethod","account","reset","dispatch","P","accounts","router","navigateByUrl","console","log","un","route","params","getDetailAccount","accountSrv","Object","keys","length","xn","f","id_person","fullname","name_bank","savings","status","protected","franchise","A","category_card","x","number_account","T","quota","q","valid_card","y","b","date_creation","C","date_update","U","I","setValue","document","querySelectorAll","checked","J","w","F","N","split","pop","join","validateType","updateAccount","h","icon","title","text","then","navigate","Ln","select","susP","warn","pageA","page","pages","quantity","total","earnings","limit","earningsSrv","getEarningsByAccount","rows","pagesArray","push","setPage","parseInt","next","prev","seeByAccount","nt","expensives","method","expensivesService","getExpensesByPayMethod","vt","path","component","canActivate","$","children","E","investments","investmentService","getInvestmentsByAccount","Zt","p","ht","r","L","S","ft"],"sources":["./src/app/pages/dashboard/accounts/start-accounts/start-accounts.component.ts","./src/app/pages/dashboard/accounts/create/create-account.component.ts","./src/app/pages/dashboard/accounts/create/create-account.component.html","./src/app/pages/dashboard/accounts/details/details.component.html","./src/app/pages/dashboard/accounts/details/details.component.ts","./src/app/pages/dashboard/accounts/edit/edit-account.component.html","./src/app/pages/dashboard/accounts/edit/edit-account.component.ts","./src/app/pages/dashboard/accounts/earnings/earnings-account.component.html","./src/app/pages/dashboard/accounts/earnings/earnings-account.component.ts","./src/app/pages/dashboard/accounts/expensives/expensives-account.component.html","./src/app/pages/dashboard/accounts/expensives/expensives-account.component.ts","./src/app/pages/dashboard/accounts/investments/investments-account.component.html","./src/app/pages/dashboard/accounts/accounts-routing.module.ts","./src/app/pages/dashboard/accounts/investments/investments-account.component.ts","./src/app/pages/dashboard/accounts/accounts.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-start-accounts',\r\n  template: `\r\n    <router-outlet></router-outlet>\r\n  `\r\n})\r\nexport class StartAccountsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subscription } from 'rxjs';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { IState } from 'src/app/store';\r\nimport { Accounts } from 'src/app/store/actions/user';\r\nimport { dialogSmall } from 'src/environments/global';\r\n\r\n@Component({\r\n  selector: 'app-create-account',\r\n  templateUrl: './create-account.component.html',\r\n})\r\nexport class CreateAccountComponent implements OnInit, OnDestroy {\r\n  form: FormGroup = new FormGroup({});\r\n\r\n  sus: Subscription = new Subscription();\r\n  user: IUserData = {};\r\n\r\n  constructor(\r\n    private userService: UserService, \r\n    private store: Store<IState>,\r\n    private router: Router\r\n  ) {\r\n    this.sus = this.store.subscribe((state) => {\r\n      this.user = state.user.data;\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm() {\r\n    this.form = new FormGroup({\r\n      name: new FormControl('', Validators.required),\r\n      credit: new FormControl(''),\r\n      order: new FormControl(''),\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sus.unsubscribe();\r\n  }\r\n\r\n  async createPaymentMethod() {\r\n    if (this.form.valid) {\r\n      let { name, credit, order } = this.form.controls;\r\n\r\n      try {\r\n        let data = {\r\n          name: name.value,\r\n          credit: credit?.value ? credit.value : false,\r\n          order: order.value,\r\n          person: this.user?.person?.id,\r\n        };\r\n        let response: any = await this.userService.createPayMethod(data);\r\n\r\n        if (response.account) {\r\n          this.form.reset();\r\n          this.store.dispatch(Accounts({ accounts: response.accounts }));\r\n          dialogSmall('Account created successfull!');\r\n          this.router.navigateByUrl(`/dashboard/accounts/${response.account.id}/details`);\r\n        } else {\r\n          dialogSmall('Cannot to created account', 'error');\r\n          // console.log('registro fallido');\r\n        }\r\n      } catch (error) {\r\n        console.log('error => ', error);\r\n      }\r\n    }\r\n  }\r\n}\r\n","<div class=\"container pt-5 mx-auto\">\r\n  <h1 class=\"text-center font-bold text-2xl mt-7 mb-5\">Create Account</h1>\r\n\r\n  <div class=\"grid gap-4\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"createPaymentMethod()\">\r\n      <div class=\"w-full\">\r\n        <input type=\"text\" placeholder=\"Account Name\" formControlName=\"name\" class=\"w-full p-2 mb-2\">\r\n      </div>\r\n      <div class=\"w-full\">\r\n        <input type=\"number\" min=\"0\" placeholder=\"Order\" formControlName=\"order\" class=\"w-full p-2 mb-2\">\r\n      </div>\r\n      <div class=\"w-full\">\r\n        <label class=\"flex w-full items-center\">\r\n          <input type=\"checkbox\" placeholder=\"Credit\" formControlName=\"credit\" class=\"mr-2\">\r\n          <span>Credit?</span>\r\n        </label>\r\n      </div>\r\n      <div class=\"w-full\">\r\n        <button type=\"submit\" class=\"btn-form\">Create</button>\r\n      </div>\r\n    </form>\r\n\r\n    <div>\r\n      <app-list-accounts \r\n        [limit]=\"8\"\r\n        [sidebar]=\"false\" \r\n        [button]=\"false\" \r\n        [padding]=\"false\"\r\n        [showAllLink]=\"true\"\r\n        [showOrder]=\"false\"></app-list-accounts>\r\n    </div>\r\n  </div>\r\n</div>","<div class=\"px-6 py-4\">\r\n  <div class=\"grid grid-cols-2 gap-4\">\r\n    <div class=\"col-span-2\">\r\n      <h1 class=\"text-2xl text-center\">Details Account <span class=\"font-bold\">{{account?.name}}</span></h1>\r\n    </div>\r\n\r\n    <!-- show account details -->\r\n    <div class=\"bg-white rounded-md shadow-lg py-4 xl:py-10 md:py-6 md:px-8 xl:px-14\" [ngClass]=\"{'col-span-2': !account?.credit && !account?.savings}\">\r\n      <div class=\"col-span-2\">\r\n        <h2 class=\"text-lg font-semibold\">Main Info</h2>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-4\">\r\n        <p class=\"text-gray-600\">Name:</p>\r\n        <p class=\"font-semibold\">{{account?.name}}</p>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-4\">\r\n        <p class=\"text-gray-600\">Person:</p>\r\n        <p class=\"font-semibold\">{{account?.person?.fullname}}</p>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.name_bank\">\r\n        <p class=\"text-gray-600\">Bank:</p>\r\n        <p class=\"font-semibold\">{{account?.name_bank}}</p>\r\n      </div>\r\n      \r\n      <div class=\"grid grid-cols-2 gap-4\">\r\n        <p class=\"text-gray-600\">Created:</p>\r\n        <p class=\"font-semibold\">{{account?.date_creation | date}}</p>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-4\">\r\n        <p class=\"text-gray-600\">Updated:</p>\r\n        <p class=\"font-semibold\">{{account?.date_update | date}}</p>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"bg-white rounded-md shadow-lg py-4 xl:py-10 md:py-6 md:px-8 xl:px-14\" *ngIf=\"account?.credit || account?.savings\">\r\n      <!-- title -->\r\n      <div class=\"col-span-2\">\r\n        <h2 class=\"text-lg font-semibold\">Card Info</h2>\r\n      </div>\r\n\r\n      <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.number_account\">\r\n        <p class=\"text-gray-600\">Number:</p>\r\n        <p class=\"font-semibold\">{{account?.number_account}}</p>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.franchise\">\r\n        <p class=\"text-gray-600\">Franchise:</p>\r\n        <p class=\"font-semibold\">{{account?.franchise}}</p>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.category_card\">\r\n        <p class=\"text-gray-600\">Category Card:</p>\r\n        <p class=\"font-semibold\">{{account?.category_card}}</p>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit\">\r\n        <p class=\"text-gray-600\">Quota:</p>\r\n        <p class=\"font-semibold\">${{(account?.quota || 0) | number}}</p>\r\n      </div>\r\n      <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit && account?.valid_card\">\r\n        <p class=\"text-gray-600\">Valid Card:</p>\r\n        <p class=\"font-semibold\">{{account?.valid_card | date:'MM/YY'}}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"bg-white rounded-md shadow-lg p-4 col-span-2\" [ngClass]=\"{'col-span-2': !account?.credit || !account?.savings}\">\r\n      <div class=\"flex justify-between items-center\">\r\n        <div>\r\n          Status: \r\n          <span class=\"font-semibold text-green\" *ngIf=\"account?.status\">Active</span>\r\n          <span class=\"font-semibold text-red-500\" *ngIf=\"!account?.status\">Inactive</span>\r\n        </div>\r\n        <div>\r\n          <a [routerLink]=\"['/dashboard', 'accounts', account.id, 'earnings']\" routerLinkActive=\"router-link-active\" ><span class=\"icon-stack mr-1\"></span>Earnings</a>\r\n          <a [routerLink]=\"['/dashboard', 'accounts', account.id, 'expensives']\" routerLinkActive=\"router-link-active\" class=\"ml-2\"><span class=\"icon-coin-dollar mr-1\"></span>Expensives</a>\r\n          <a [routerLink]=\"['/dashboard', 'accounts', account.id, 'investments']\" routerLinkActive=\"router-link-active\" class=\"ml-2\"><span class=\"icon-stats-dots mr-1\"></span>Investments</a>\r\n          <a [routerLink]=\"['/dashboard', 'accounts']\" routerLinkActive=\"router-link-active\"\r\n            class=\"text-green-500 hover:text-green-700 ml-2\"><span class=\"icon-book mr-1\"></span>Lists</a>\r\n          <a [routerLink]=\"['/dashboard', 'accounts', account?.id, 'edit']\" routerLinkActive=\"router-link-active\"\r\n              class=\"text-blue-500 hover:text-blue-700 ml-2\" *ngIf=\"account?.name !== 'Efectivo' && account?.name !== 'Cash'\"><span class=\"icon-pencil mr-1\"></span>Update</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { IAccount } from 'src/app/interfaces/accounts';\r\nimport { AccountsService } from 'src/app/services/accounts.service';\r\n\r\n@Component({\r\n  selector: 'app-details',\r\n  templateUrl: './details.component.html'\r\n})\r\nexport class DetailsComponent implements OnInit {\r\n\r\n  account: IAccount = {};\r\n\r\n  constructor(\r\n    private accountSrv: AccountsService,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // get id account\r\n    this.route.params.subscribe(params => {\r\n      const id: any = params['id'];\r\n      // get detail account\r\n      console.log(id);\r\n      this.getDetailAccount(id);\r\n    });\r\n  }\r\n\r\n  async getDetailAccount(id: string | number){\r\n    try {\r\n      const res: any = await this.accountSrv.getDetailAccount(id);\r\n      console.log(res);\r\n\r\n      if(Object.keys(res).length){\r\n        this.account = res;\r\n      }\r\n    } catch (error) {\r\n      \r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"px-6 py-4\">\r\n  <form [formGroup]=\"form\" *ngIf=\"form?.valid\">\r\n    <div class=\"grid grid-cols-2 gap-4\">\r\n      <div class=\"col-span-2\">\r\n        <h1 class=\"text-2xl text-center\">Update Account <span class=\"font-bold\">{{account?.name}}</span></h1>\r\n      </div>\r\n      \r\n      <div class=\"bg-white rounded-md shadow-lg py-4 xl:py-10 md:py-6 md:px-8 xl:px-14\" [ngClass]=\"{'col-span-2': !account?.credit && !account?.savings}\">\r\n        <!-- title -->\r\n        <div class=\"col-span-2\">\r\n          <h2 class=\"text-lg font-semibold\">Main Info</h2>\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\">\r\n          <p class=\"text-gray-600\">Name:</p>\r\n          <input type=\"text\" formControlName=\"name\" class=\"input-form\">\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\">\r\n          <p class=\"text-gray-600\">Person:</p>\r\n          <input type=\"text\" formControlName=\"id_person\" class=\"disabled text-gray-400 outline-none\">\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\">\r\n          <p class=\"text-gray-600\">Type:</p>\r\n          <div>\r\n            <label class=\"mr-2\">\r\n              <input type=\"radio\" name=\"type\" value=\"credit\" (change)=\"validateType('credit')\"> Credit\r\n            </label>\r\n            <label>\r\n              <input type=\"radio\" name=\"type\" value=\"savings\" (change)=\"validateType('savings')\"> Savings\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit || account?.savings\">\r\n          <p class=\"text-gray-600\">Bank Name:</p>\r\n          <input type=\"text\" formControlName=\"name_bank\" class=\"input-form\">\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\">\r\n          <p class=\"text-gray-600\">Order:</p>\r\n          <input type=\"number\" min=\"0\" max=\"100\" formControlName=\"order\" class=\"input-form\">\r\n        </div>\r\n        \r\n        <div class=\"grid grid-cols-2 gap-4\">\r\n          <p class=\"text-gray-600\">Last Updated:</p>\r\n          <p class=\"font-semibold text-blue-600\"><em>{{account?.date_update | date}}</em></p>\r\n        </div>\r\n\r\n        <div class=\"grid grid-cols-2 gap-4\">\r\n          <p class=\"text-gray-600\">Status:</p>\r\n          <div>\r\n            <label class=\"mr-2\">\r\n              <input type=\"checkbox\" name=\"status\" formControlName=\"status\"> \r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n      <div class=\"bg-white rounded-md shadow-lg py-4 xl:py-10 md:py-6 md:px-8 xl:px-14\" *ngIf=\"account?.credit || account?.savings\">\r\n        <!-- title -->\r\n        <div class=\"col-span-2\">\r\n          <h2 class=\"text-lg font-semibold\">Card Info</h2>\r\n        </div>\r\n\r\n        <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit || account?.savings\">\r\n          <p class=\"text-gray-600\">Number:</p>\r\n          <input type=\"text\" formControlName=\"number_account\" class=\"input-form\">\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit || account?.savings\">\r\n          <p class=\"text-gray-600\">Franchise:</p>\r\n          <select formControlName=\"franchise\" class=\"input-form\">\r\n            <option value=\"mastercard\">MasterCard</option>\r\n            <option value=\"visa\">VISA</option>\r\n            <option value=\"amex\">American Express</option>\r\n            <option value=\"dinners\">Dinners</option>\r\n            <option value=\"nocat\">Without Category</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit || account?.savings\">\r\n          <p class=\"text-gray-600\">Category Card:</p>\r\n          <select formControlName=\"category_card\" class=\"input-form\">\r\n            <option value=\"classic\">Classic</option>\r\n            <option value=\"gold\">Gold</option>\r\n            <option value=\"platinum\">Platinum</option>\r\n            <option value=\"black\">Black</option>\r\n            <option value=\"nocat\">Without Category</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit\">\r\n          <p class=\"text-gray-600\">Quota:</p>\r\n          <input type=\"number\" formControlName=\"quota\" class=\"input-form\">\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit\">\r\n          <p class=\"text-gray-600\">Valid Card:</p>\r\n          <input type=\"month\" formControlName=\"valid_card\" class=\"input-form\">\r\n        </div>\r\n        <div class=\"grid grid-cols-2 gap-4\" *ngIf=\"account?.credit\">\r\n          <p class=\"text-gray-600\">Protected:</p>\r\n          <div>\r\n            <label class=\"mr-2\">\r\n              <input type=\"checkbox\" name=\"protected\" formControlName=\"protected\"> \r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"bg-white rounded-md shadow-lg p-4 col-span-2\" [ngClass]=\"{'col-span-2': !account?.credit || !account?.savings}\">\r\n        <div class=\"flex justify-end items-center\">\r\n          <a [routerLink]=\"['/dashboard', 'accounts', account?.id, 'details']\" routerLinkActive=\"router-link-active\"\r\n            class=\"text-blue-500 hover:text-blue-700\">Cancel</a>\r\n\r\n          <!-- btn to save -->\r\n          <button (click)=\"updateAccount()\" class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded ml-2\" *ngIf=\"account?.name !== 'Efectivo' && account?.name !== 'Cash'\">\r\n            Save\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { IAccount } from 'src/app/interfaces/accounts';\r\nimport { AccountsService } from 'src/app/services/accounts.service';\r\nimport { IState } from 'src/app/store';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-edit-account',\r\n  templateUrl: './edit-account.component.html'\r\n})\r\nexport class EditAccountComponent implements OnInit {\r\n  form: FormGroup = new FormGroup({});\r\n  account: IAccount = {};\r\n  id: string = '';\r\n\r\n  constructor(\r\n    private store: Store<IState>, \r\n    private accountSrv: AccountsService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.route.params.subscribe(params => {\r\n      this.id = params['id'];\r\n      this.getDetailAccount(params['id']);\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(){\r\n    this.form = new FormGroup({\r\n      name: new FormControl(this.account?.name),\r\n      id_person: new FormControl(this.account?.person?.fullname),\r\n      name_bank: new FormControl(this.account?.name_bank),\r\n      savings: new FormControl(this.account?.savings),\r\n      credit: new FormControl(this.account?.credit),\r\n      status: new FormControl(this.account?.status),\r\n      protected: new FormControl(this.account?.protected),\r\n      franchise: new FormControl(this.account?.franchise),\r\n      category_card: new FormControl(this.account?.category_card),\r\n      number_account: new FormControl(this.account?.number_account),\r\n      quota: new FormControl(this.account?.quota),\r\n      valid_card: new FormControl(this.account?.valid_card),\r\n      order: new FormControl(this.account?.order),\r\n      date_creation: new FormControl(this.account?.date_creation),\r\n      date_update: new FormControl(this.account?.date_update)\r\n    });\r\n\r\n    let elHtml: any;\r\n    if(this.account?.credit){\r\n      this.form.controls['credit'].setValue(true);\r\n      elHtml = document.querySelectorAll('input[name=\"type\"]')[0];\r\n      elHtml.checked = true;\r\n    }\r\n    if(this.account?.savings){\r\n      this.form.controls['savings'].setValue(true);\r\n      elHtml = document.querySelectorAll('input[name=\"type\"]')[1];\r\n      elHtml.checked = true;\r\n    }\r\n    if(this.account?.valid_card){\r\n      const result: any = this.account?.valid_card;\r\n      const reAr: any = result.split('-');\r\n      reAr.pop();\r\n      this.form.controls['valid_card'].setValue(reAr.join('-'));\r\n    }\r\n  }\r\n\r\n  validateType(ref: string){\r\n    if(ref === 'credit'){\r\n      this.form.controls['credit'].setValue(true);\r\n      this.account.credit = true;\r\n      this.form.controls['savings'].setValue(false);\r\n      this.account.savings = false;\r\n    }else{\r\n      this.form.controls['savings'].setValue(true);\r\n      this.account.savings = true;\r\n      this.form.controls['credit'].setValue(false);\r\n      this.account.credit = false;\r\n    }\r\n  }\r\n\r\n  async getDetailAccount(id: string | number){\r\n    try {\r\n      const res: any = await this.accountSrv.getDetailAccount(id);\r\n\r\n      if(Object.keys(res).length){\r\n        this.account = res;\r\n        this.buildForm();\r\n      }\r\n    } catch (error) {\r\n      console.log('error to get data account', error);\r\n    }\r\n  }\r\n\r\n  async updateAccount(){\r\n    if(this.form.valid){\r\n      try {\r\n        // organize id person\r\n        this.form.controls['id_person'].setValue(this.account?.person?.id);\r\n        const response: any = await this.accountSrv.updateAccount(this.id, this.form.value);\r\n        if(response && response?.status){\r\n          Swal.fire({\r\n            icon: 'success',\r\n            title: 'Success',\r\n            text: 'Account updated successfully',\r\n          }).then((result) => {\r\n\r\n          });\r\n        }\r\n        this.router.navigate(['/dashboard/accounts/'+ this.id + '/details']);\r\n      } catch (error) {\r\n        console.log(error);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Oops...',\r\n          text: 'Server Error...',\r\n        });\r\n      }\r\n    }else{\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Oops...',\r\n        text: 'Fields are required',\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"search-wrap pt-8 px-6 h-full\">\r\n  <div class=\"search-header\">\r\n    <h4 class=\"main-text flex justify-between\">\r\n      <span>\r\n        Have <b class=\"main-label\">{{ quantity }}</b> earnings for this account <b class=\"main-label\">{{ account?.name }}</b> by total <b class=\"main-label\">{{ total  | currency:'$':'symbol':'4.0' }}</b>\r\n      </span>\r\n\r\n      <div class=\"flex gap-2\">\r\n        <!-- Filters -->\r\n        <select class=\"pb-1\" [(ngModel)]=\"id\" (change)=\"seeByAccount()\">\r\n          <option [value]=\"'create'\" *ngIf=\"!(accounts$ | async)?.length\" class=\"text-blue-400\">Create one</option>\r\n          <ng-container *ngFor=\"let item of (accounts$ | async)\">\r\n            <option [value]=\"item.id\" *ngIf=\"item.savings || item.name === 'Efectivo' || item.name === 'Cash'\">{{ item.name }}</option>\r\n          </ng-container>\r\n        </select>\r\n\r\n        <select [(ngModel)]=\"limit\" (change)=\"ngOnInit(true)\">\r\n          <option value=\"12\">12</option>\r\n          <option value=\"20\">20</option>\r\n          <option value=\"24\">24</option>\r\n          <option value=\"36\">36</option>\r\n          <option value=\"48\">48</option>\r\n          <option value=\"60\">60</option>\r\n          <option value=\"100\">100</option>\r\n        </select>\r\n      </div>\r\n    </h4>\r\n  </div>\r\n  <div class=\"search-content overflow-auto\">\r\n    <div class=\"grid xl:grid-cols-4 md:grid-cols-3 grid-cols-2 gap-4\" *ngIf=\"earnings && earnings.length\">\r\n      <ng-container *ngFor=\"let item of earnings;let i = index\">\r\n        <app-item-earning [showDelete]=\"false\" [item]=\"item\"></app-item-earning>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"alert p-2\" *ngIf=\"earnings && !earnings.length\">\r\n      There're not earnings with this account <b>{{account?.name}}</b>, create one <a [routerLink]=\"'/dashboard/earnings/create'\">here</a>\r\n    </div>\r\n  </div>\r\n  <div class=\"search-footer\">\r\n    <div class=\"alert mt-6\" *ngIf=\"earnings && earnings.length\">\r\n      <app-btn \r\n        [classes]=\"'main-btn'\" \r\n        [routes]=\"['/dashboard/earnings/create']\">\r\n        <ng-template #fill>\r\n          <span class=\"icon-stack mr-1\"></span> Create Earning\r\n        </ng-template>\r\n      </app-btn>\r\n    </div>\r\n\r\n    <div class=\"pagetor inline-flex justify-end items-end relative -top-4 text-sm fr\">\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"prev()\" *ngIf=\"(page + 1) > 1\"><</button>\r\n      <span class=\"p-1 bg-gray-900 text-white\">\r\n        Showing \r\n        <span *ngIf=\"limit * (page + 1) < quantity\">{{ limit * (page+1) }}</span>\r\n        <span *ngIf=\"limit * (page + 1) > quantity\">{{quantity}}</span> \r\n        of {{ quantity }} Registers | Page: \r\n        <select class=\"text-black\" [(ngModel)]=\"pageA\" (change)=\"setPage()\">\r\n          <option *ngFor=\"let item of pagesArray\" [value]=\"item\">{{item + 1}}</option>\r\n        </select>/{{ pages }}\r\n      </span>\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"next()\" *ngIf=\"page + 1 < pages\">></button>\r\n    </div>\r\n  </div>\r\n</div>\r\n  \r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { IAccount } from 'src/app/interfaces/accounts';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { EarningsService } from 'src/app/services/earnings.service';\r\nimport { IState } from 'src/app/store';\r\n\r\n@Component({\r\n  selector: 'app-earnings-account',\r\n  templateUrl: './earnings-account.component.html'\r\n})\r\nexport class EarningsAccountComponent implements OnInit {\r\n  id: number = 0;\r\n  user: IUserData = {};\r\n  susP: Subscription = new Subscription();\r\n  sus: Subscription = new Subscription();\r\n\r\n  earnings: any = [];\r\n  account: any = [];\r\n  total: number = 0;\r\n  quantity: number = 0;\r\n  page: number = 0;\r\n  pageA: any = 0;\r\n  pages: number = 0;\r\n  pagesArray: any[] = [];\r\n  limit: number = 24;\r\n\r\n  accounts$: Observable<IAccount[]> = this.store.select(state => state.user.data.accounts);\r\n\r\n  constructor(\r\n    private store: Store<IState>, \r\n    private earningsSrv: EarningsService, \r\n    private route: ActivatedRoute,\r\n    private router: Router, \r\n  ) {\r\n    this.susP = this.route.params.subscribe(params => {\r\n      this.id = params.id;\r\n    });\r\n    this.sus = this.store.select(state => state.user).subscribe(user => {\r\n      console.warn(user);\r\n      this.user = user.data;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.susP.unsubscribe();\r\n    this.sus.unsubscribe();\r\n  }\r\n\r\n  async ngOnInit(reload?: boolean) {\r\n    try {\r\n      if(reload){\r\n        this.pageA = 0;\r\n        this.page = 0;\r\n        this.pages = 0;\r\n        this.quantity = 0;\r\n        this.total = 0;\r\n        this.earnings = [];\r\n      }\r\n\r\n      const params: any = {\r\n        account: this.id, \r\n        person: this.user.id,\r\n        page: this.page,\r\n        limit: this.limit,\r\n      };\r\n\r\n      let response: any = await this.earningsSrv.getEarningsByAccount(params);\r\n\r\n      // console.log(response);\r\n\r\n      if (response.account) {\r\n        this.account = response.account\r\n      }\r\n      if (response.earnings) {\r\n        this.earnings = response.earnings.rows;\r\n      }\r\n      if (response.total) {\r\n        this.total = response.total;\r\n      }\r\n      if (response.quantity) {\r\n        this.quantity = response.quantity;\r\n      }\r\n      if (response.pages) {\r\n        this.pages = response.pages;\r\n        this.pagesArray = [];\r\n        for (let i = 0; i < this.pages; i++) {\r\n          this.pagesArray.push(i);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  setPage(): void {\r\n    this.page = parseInt(this.pageA);\r\n    this.ngOnInit();\r\n  }\r\n\r\n  next(): void {\r\n    this.page++;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  prev(): void {\r\n    this.page--;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  seeByAccount(){\r\n    this.router.navigateByUrl(`/dashboard/accounts/${this.id}/earnings`);\r\n    this.ngOnInit(true);\r\n  }\r\n\r\n}\r\n","<div class=\"search-wrap pt-8 px-6 h-full\">\r\n  <div class=\"search-header\">\r\n    <h4 class=\"main-text flex justify-between\" *ngIf=\"expensives && expensives?.length\">\r\n      <span>\r\n        Have <b class=\"main-label\">{{ quantity | number }}</b> expensives for this account <b class=\"main-label\">{{ method?.name }}</b>, by <b class=\"main-label\">{{ total  | currency:'$':'symbol':'4.0' }}</b>\r\n      </span>\r\n\r\n      <div class=\"flex gap-2\">\r\n        <!-- Filters -->\r\n        <select class=\"pb-1\" [(ngModel)]=\"id\" (change)=\"seeByAccount()\">\r\n          <option [value]=\"'create'\" *ngIf=\"!(accounts$ | async)?.length\" class=\"text-blue-400\">Create one</option>\r\n          <option [value]=\"item.id\" *ngFor=\"let item of (accounts$ | async)\">{{ item.name }}</option>\r\n        </select>\r\n\r\n        <select [(ngModel)]=\"limit\" (change)=\"ngOnInit(true)\">\r\n          <option value=\"12\">12</option>\r\n          <option value=\"20\">20</option>\r\n          <option value=\"24\">24</option>\r\n          <option value=\"36\">36</option>\r\n          <option value=\"48\">48</option>\r\n          <option value=\"60\">60</option>\r\n          <option value=\"100\">100</option>\r\n        </select>\r\n      </div>\r\n    </h4>\r\n  </div>\r\n  <div class=\"search-content overflow-auto\">\r\n    <div class=\"grid xl:grid-cols-4 md:grid-cols-3 grid-cols-2 gap-4\" *ngIf=\"expensives && expensives.length\">\r\n      <ng-container *ngFor=\"let item of expensives;let i = index\">\r\n        <app-item-expensive [showDelete]=\"false\" [item]=\"item\"></app-item-expensive>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"alert p-2\" *ngIf=\"expensives && !expensives.length\">\r\n      There're not expensives for this account {{method?.name}}, create one <a [routerLink]=\"'/dashboard/expensives'\">here</a>\r\n    </div>\r\n  </div>\r\n  <div class=\"search-footer\">\r\n    <div class=\"alert mt-6\" *ngIf=\"expensives && expensives.length\">\r\n      <a class=\"main-btn\" [routerLink]=\"'/dashboard/expensives/create'\"><span class=\"icon-coin-dollar mr-1\"></span> Create Expensive</a>\r\n    </div>\r\n    <div class=\"pagetor inline-flex justify-end items-end relative -top-4 text-sm fr\">\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"prev()\" *ngIf=\"(page + 1) > 1\"><</button>\r\n      <span class=\"p-1 bg-gray-900 text-white\">\r\n        Showing \r\n        <span *ngIf=\"limit * (page + 1) < quantity\">{{ limit * (page+1) }}</span>\r\n        <span *ngIf=\"limit * (page + 1) > quantity\">{{quantity}}</span> \r\n        of {{ quantity }} Registers | Page: \r\n        <select class=\"text-black\" [(ngModel)]=\"pageA\" (change)=\"setPage()\">\r\n          <option *ngFor=\"let item of pagesArray\" [value]=\"item\">{{item + 1}}</option>\r\n        </select>/{{ pages }}\r\n      </span>\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"next()\" *ngIf=\"page + 1 < pages\">></button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { IAccount } from 'src/app/interfaces/accounts';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { ExpensivesService } from 'src/app/services/expensives.service';\r\nimport { IState } from 'src/app/store';\r\n\r\n@Component({\r\n  selector: 'app-expensives-account',\r\n  templateUrl: './expensives-account.component.html'\r\n})\r\nexport class ExpensivesAccountComponent implements OnInit {\r\n  id: number = 0;\r\n  user: IUserData = {};\r\n  susP: Subscription = new Subscription();\r\n  sus: Subscription = new Subscription();\r\n\r\n  expensives: any = [];\r\n  method: any = [];\r\n  total: number = 0;\r\n  quantity: number = 0;\r\n  page: number = 0;\r\n  pageA: any = 0;\r\n  pages: number = 0;\r\n  pagesArray: any[] = [];\r\n  limit: number = 24;\r\n\r\n  accounts$: Observable<IAccount[]> = this.store.select(state => state.user.data.accounts);\r\n\r\n  constructor(\r\n    private store: Store<IState>, \r\n    private expensivesService: ExpensivesService, \r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.susP = this.route.params.subscribe(params => {\r\n      this.id = params.id;\r\n    });\r\n    this.sus = this.store.select(state => state.user).subscribe(user => {\r\n      // console.warn(user);\r\n      this.user = user.data;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.susP.unsubscribe();\r\n    this.sus.unsubscribe();\r\n  }\r\n\r\n  async ngOnInit(reload?: boolean) {\r\n    try {\r\n      if(reload){\r\n        this.pageA = 0;\r\n        this.page = 0;\r\n        this.pages = 0;\r\n        this.quantity = 0;\r\n        this.total = 0;\r\n        this.expensives = [];\r\n      }\r\n\r\n      const params: any = {\r\n        method: this.id, \r\n        person: this.user.id,\r\n        page: this.page,\r\n        limit: this.limit,\r\n      };\r\n\r\n      let response: any = await this.expensivesService.getExpensesByPayMethod(params);\r\n\r\n      // console.log(response);\r\n\r\n      if (response.method) {\r\n        this.method = response.method\r\n      }\r\n      if (response.expensives) {\r\n        this.expensives = response.expensives.rows;\r\n      }\r\n      if (response.total) {\r\n        this.total = response.total;\r\n      }\r\n      if (response.quantity) {\r\n        this.quantity = response.quantity;\r\n      }\r\n      if (response.pages) {\r\n        this.pages = response.pages;\r\n        this.pagesArray = [];\r\n        for (let i = 0; i < this.pages; i++) {\r\n          this.pagesArray.push(i);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  }\r\n\r\n  setPage(): void {\r\n    this.page = parseInt(this.pageA);\r\n    this.ngOnInit();\r\n  }\r\n\r\n  next(): void {\r\n    this.page++;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  prev(): void {\r\n    this.page--;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  seeByAccount(){\r\n    this.router.navigateByUrl(`/dashboard/accounts/${this.id}/expensives`);\r\n    this.ngOnInit(true);\r\n  }\r\n\r\n}\r\n","<div class=\"search-wrap pt-8 px-6 h-full\">\r\n  <div class=\"search-header\">\r\n    <h4 class=\"main-text flex justify-between\">\r\n      <span>\r\n        Have <b class=\"main-label\">{{ investments.length }}</b> investments for this account <b class=\"main-label\">{{ account?.name }}</b>, by <b class=\"main-label\">{{ total  | currency:'$':'symbol':'4.0' }}</b>\r\n      </span>\r\n\r\n      <div class=\"flex gap-2\">\r\n        <!-- Filters -->\r\n        <select class=\"pb-1\" [(ngModel)]=\"id\" (change)=\"seeByAccount()\">\r\n          <option [value]=\"'create'\" *ngIf=\"!(accounts$ | async)?.length\" class=\"text-blue-400\">Create one</option>\r\n          <ng-container *ngFor=\"let item of (accounts$ | async)\">\r\n            <option [value]=\"item.id\" *ngIf=\"item.savings || item.name === 'Efectivo' || item.name === 'Cash'\">{{ item.name }}</option>\r\n          </ng-container>\r\n        </select>\r\n\r\n        <!-- Filters -->\r\n        <select [(ngModel)]=\"limit\" (change)=\"ngOnInit(true)\">\r\n          <option value=\"12\">12</option>\r\n          <option value=\"20\">20</option>\r\n          <option value=\"24\">24</option>\r\n          <option value=\"36\">36</option>\r\n          <option value=\"48\">48</option>\r\n          <option value=\"60\">60</option>\r\n          <option value=\"100\">100</option>\r\n        </select>\r\n      </div>\r\n    </h4>\r\n  </div>\r\n  <div class=\"search-content overflow-auto\">\r\n    <div class=\"grid xl:grid-cols-4 md:grid-cols-3 grid-cols-2 gap-4\" *ngIf=\"investments && investments.length\">\r\n      <ng-container *ngFor=\"let item of investments;let i = index\">\r\n        <app-item-investment [showDelete]=\"false\" [item]=\"item\"></app-item-investment>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"alert p-2\" *ngIf=\"investments && !investments.length\">\r\n      There're not investments for this account {{account?.name}}, create one <a [routerLink]=\"'/dashboard/investments/create'\">here</a>\r\n    </div>\r\n  </div>\r\n  <div class=\"search-footer\">\r\n    <div class=\"alert mt-6\" *ngIf=\"investments && investments.length\">\r\n      <a class=\"main-btn\" [routerLink]=\"'/dashboard/investments/create'\"><span class=\"icon-coin-dollar mr-1\"></span> Create Investment</a>\r\n    </div>\r\n\r\n    <div class=\"pagetor inline-flex justify-end items-end relative -top-4 text-sm fr\">\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"prev()\" *ngIf=\"(page + 1) > 1\"><</button>\r\n      <span class=\"p-1 bg-gray-900 text-white\">\r\n        Showing \r\n        <span *ngIf=\"limit * (page + 1) < quantity\">{{ limit * (page+1) }}</span>\r\n        <span *ngIf=\"limit * (page + 1) > quantity\">{{quantity}}</span> \r\n        of {{ quantity }} Registers | Page: \r\n        <select class=\"text-black\" [(ngModel)]=\"pageA\" (change)=\"setPage()\">\r\n          <option *ngFor=\"let item of pagesArray\" [value]=\"item\">{{item + 1}}</option>\r\n        </select>/{{ pages }}\r\n      </span>\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"next()\" *ngIf=\"page + 1 < pages\">></button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { StartAccountsComponent } from \"./start-accounts/start-accounts.component\";\r\nimport { DashboardService } from \"src/app/guards/dashboard.service\";\r\nimport { CreateAccountComponent } from \"./create/create-account.component\";\r\nimport { ListAccountsComponent } from \"src/app/components/list-accounts/list-accounts.component\";\r\nimport { DetailsComponent } from \"./details/details.component\";\r\nimport { EditAccountComponent } from \"./edit/edit-account.component\";\r\nimport { EarningsAccountComponent } from \"./earnings/earnings-account.component\";\r\nimport { ExpensivesAccountComponent } from \"./expensives/expensives-account.component\";\r\nimport { InvestmentsAccountComponent } from \"./investments/investments-account.component\";\r\n\r\nconst routes: Routes = [\r\n    { \r\n        path: '', component: StartAccountsComponent,\r\n        canActivate: [DashboardService],\r\n        children: [\r\n            { path: '', component: ListAccountsComponent },\r\n            { path: 'create', component: CreateAccountComponent },\r\n            { path: ':id/details', component: DetailsComponent },\r\n            { path: ':id/edit', component: EditAccountComponent },\r\n            { path: ':id/earnings', component: EarningsAccountComponent },\r\n            { path: ':id/expensives', component: ExpensivesAccountComponent },\r\n            { path: ':id/investments', component: InvestmentsAccountComponent }\r\n        ] \r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountsRoutingModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { IAccount } from 'src/app/interfaces/accounts';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { InvestmentsService } from 'src/app/services/investments.service';\r\nimport { IState } from 'src/app/store';\r\n\r\n@Component({\r\n  selector: 'app-investments-account',\r\n  templateUrl: './investments-account.component.html'\r\n})\r\nexport class InvestmentsAccountComponent implements OnInit {\r\n  id: number = 0;\r\n  user: IUserData = {};\r\n  susP: Subscription = new Subscription();\r\n  sus: Subscription = new Subscription();\r\n\r\n  investments: any = [];\r\n  account: any = [];\r\n  total: number = 0;\r\n  quantity: number = 0;\r\n  page: number = 0;\r\n  pageA: any = 0;\r\n  pages: number = 0;\r\n  pagesArray: any[] = [];\r\n  limit: number = 24;\r\n\r\n  accounts$: Observable<IAccount[]> = this.store.select(state => state.user.data.accounts);\r\n\r\n  constructor(\r\n    private store: Store<IState>, \r\n    private investmentService: InvestmentsService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.susP = this.route.params.subscribe(params => {\r\n      this.id = params.id;\r\n    });\r\n    this.sus = this.store.select(state => state.user).subscribe(user => {\r\n      // console.warn(user);\r\n      this.user = user.data;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.susP.unsubscribe();\r\n    this.sus.unsubscribe();\r\n  }\r\n\r\n  async ngOnInit(reload?: boolean) {\r\n    try {\r\n      if(reload){\r\n        this.pageA = 0;\r\n        this.page = 0;\r\n        this.pages = 0;\r\n        this.quantity = 0;\r\n        this.total = 0;\r\n        this.investments = [];\r\n      }\r\n\r\n      const params: any = {\r\n        account: this.id, \r\n        person: this.user.id,\r\n        page: this.page,\r\n        limit: this.limit,\r\n      };\r\n\r\n      let response: any = await this.investmentService.getInvestmentsByAccount(params);\r\n\r\n      // console.log(response);\r\n\r\n      if (response.account) {\r\n        this.account = response.account\r\n      }\r\n      if (response.investments) {\r\n        this.investments = response.investments.rows;\r\n      }\r\n      if (response.total) {\r\n        this.total = response.total;\r\n      }\r\n      if (response.quantity) {\r\n        this.quantity = response.quantity;\r\n      }\r\n      if (response.pages) {\r\n        this.pages = response.pages;\r\n        this.pagesArray = [];\r\n        for (let i = 0; i < this.pages; i++) {\r\n          this.pagesArray.push(i);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n    }\r\n  }\r\n\r\n  \r\n  setPage(): void {\r\n    this.page = parseInt(this.pageA);\r\n    this.ngOnInit();\r\n  }\r\n\r\n  next(): void {\r\n    this.page++;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  prev(): void {\r\n    this.page--;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  seeByAccount(){\r\n    this.router.navigateByUrl(`/dashboard/accounts/${this.id}/investments`);\r\n    this.ngOnInit(true);\r\n  }\r\n\r\n}\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { NgSelectModule } from \"@ng-select/ng-select\";\r\nimport { NgApexchartsModule } from \"ng-apexcharts\";\r\nimport { AccountsRoutingModule } from \"./accounts-routing.module\";\r\nimport { SharedModule } from \"src/app/components/shared.module\";\r\nimport { DetailsComponent } from \"./details/details.component\";\r\nimport { EditAccountComponent } from \"./edit/edit-account.component\";\r\nimport { StartAccountsComponent } from \"./start-accounts/start-accounts.component\";\r\nimport { EarningsAccountComponent } from \"./earnings/earnings-account.component\";\r\nimport { ExpensivesAccountComponent } from \"./expensives/expensives-account.component\";\r\nimport { CreateAccountComponent } from \"./create/create-account.component\";\r\nimport { InvestmentsAccountComponent } from \"./investments/investments-account.component\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DetailsComponent,\r\n        EditAccountComponent,\r\n        StartAccountsComponent,\r\n        EarningsAccountComponent,\r\n        CreateAccountComponent,\r\n        ExpensivesAccountComponent,\r\n        InvestmentsAccountComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        NgSelectModule,\r\n        NgApexchartsModule,\r\n        AccountsRoutingModule,\r\n        SharedModule,\r\n    ]\r\n})\r\nexport class AccountsModule { }"],"sourceRoot":"webpack:///","file":"279.72b8eb7093ffed3ed9a5.js"}