{"version":3,"mappings":"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","names":["O","constructor","t","a","r","o","this","u","subP","activatedRoute","queryParams","subscribe","s","console","log","Object","keys","params","length","store","dispatch","susA","actions","type","getAllData","ngOnInit","f","filters","ref","validationInitial","storeSrv","earningsByDate","getCategoriesEarnings","getAllDataEarnings","ngOnDestroy","unsubscribe","e","n","selectors","F","mn","l","select","c","earnings","showChart","buildForm","sub","loading","loaded","user","h","data","Z","dataGraphics","C","complete","et","form","utilsEarnings","toggleChart","createUrl","dn","categories_earnings","sus","category","createEarningCategory","valid","controls","value","person","id","earningsSrv","createCategoryEarnings","reset","w","any","categories","deleteCategory","id_person","deleteCategorieEarning","Gn","susP","route","warn","pageA","page","pages","quantity","total","limit","getEarningsByCategory","rows","pagesArray","push","setPage","parseInt","next","prev","seeByCategory","router","navigateByUrl","wn","Qn","earningSrv","getDataEarning","earning","url","indexOf","navigate","Vn","path","component","canActivate","M","children","b","nt","_","tt","p","I","q","N"],"sources":["./src/app/pages/dashboard/earnings/start/start-earnings.component.ts","./src/app/pages/dashboard/earnings/create/create-earning.component.ts","./src/app/pages/dashboard/earnings/create/create-earning.component.html","./src/app/pages/dashboard/earnings/earnings.component.html","./src/app/pages/dashboard/earnings/earnings.component.ts","./src/app/pages/dashboard/earnings/categories/create/create-earning-category.component.ts","./src/app/pages/dashboard/earnings/categories/create/create-earning-category.component.html","./src/app/pages/dashboard/earnings/categories/detail/detail-earning-category.component.html","./src/app/pages/dashboard/earnings/categories/detail/detail-earning-category.component.ts","./src/app/pages/dashboard/earnings/home/home-earnings.component.ts","./src/app/pages/dashboard/earnings/home/home-earnings.component.html","./src/app/pages/dashboard/earnings/detail/detail-earning.component.html","./src/app/pages/dashboard/earnings/detail/detail-earning.component.ts","./src/app/pages/dashboard/earnings/graphics/graphics-earnings.component.html","./src/app/pages/dashboard/earnings/earnings-routing.module.ts","./src/app/pages/dashboard/earnings/graphics/graphics-earnings.component.ts","./src/app/pages/dashboard/earnings/earnings.module.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Actions } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subscription } from 'rxjs';\r\nimport { StoreService } from 'src/app/services/store.service';\r\nimport { IState } from 'src/app/store';\r\nimport { ResetFiltersEarnings, SetFiltersEarningsInitial } from 'src/app/store/actions/earnings.actions';\r\n\r\n@Component({\r\n  selector: 'app-start-earnings',\r\n  template: `\r\n    <router-outlet></router-outlet>\r\n  `\r\n})\r\nexport class StartEarningsComponent implements OnInit, OnDestroy {\r\n  params: any = {};\r\n\r\n  validationInitial: boolean = false;\r\n\r\n  subP: Subscription = new Subscription();\r\n  susA: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute, \r\n    private store: Store<IState>,\r\n    private storeSrv: StoreService,\r\n    private actions: Actions<IState>\r\n  ) {\r\n    this.subP = this.activatedRoute.queryParams.subscribe(params => {\r\n      console.log('qa suscription (router) params start-earnings.component', params);\r\n\r\n      if(Object.keys(this.params).length && !Object.keys(params).length){\r\n        this.store.dispatch(ResetFiltersEarnings());\r\n      }\r\n\r\n      this.params = params;\r\n    });\r\n\r\n    this.susA = this.actions.subscribe((action: any) => {\r\n      // console.log('action', action);\r\n      if(\r\n        action.type === '[Earnings User] Create Success' || \r\n        action.type === '[Earnings User] Delete Success'\r\n      ){\r\n        this.getAllData(true);\r\n      }\r\n\r\n      if(action.type === '[Earnings User] Reset Filters Earnings'){\r\n        this.params = {};\r\n        this.getAllData(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  async ngOnInit() {\r\n    if(Object.keys(this.params).length){\r\n      this.store.dispatch(SetFiltersEarningsInitial({filters: this.params, ref: 'initial start 999999999999' }));\r\n      this.validationInitial = true;\r\n      await this.storeSrv.earningsByDate(this.params, 'onInitSTART EARNINGS1');\r\n    }\r\n    this.getAllData();\r\n    await this.storeSrv.getCategoriesEarnings();\r\n  }\r\n  \r\n  async getAllData(reload: boolean = false) {\r\n    if(Object.keys(this.params).length > 1 && !reload){\r\n      return;\r\n    }\r\n    await this.storeSrv.earningsByDate(this.params, 'onInitSTART EARNINGS');\r\n    await this.storeSrv.getAllDataEarnings();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subP.unsubscribe();\r\n    this.susA.unsubscribe();\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-create-earning',\r\n  templateUrl: './create-earning.component.html'\r\n})\r\nexport class CreateEarningComponent {\r\n}\r\n","<div class=\"container pt-5 mx-auto\">\r\n  <div class=\"grid gap-4\">\r\n    <div>\r\n      <app-form-earnings class=\"form-general\"></app-form-earnings>\r\n    </div>\r\n  </div>\r\n</div>\r\n","<app-create-earning></app-create-earning>\r\n\r\n<ng-container *ngIf=\"(earnings$ | async) as earnings\">\r\n  <div class=\"container pt-5 mx-auto\" *ngIf=\"earnings?.data as data\">\r\n    <div class=\"grid gap-4\">\r\n      <form [formGroup]=\"form\">\r\n        <app-earnings-filters [form]=\"form\" [isFromCreate]=\"true\"></app-earnings-filters>\r\n      </form>\r\n\r\n      <div *ngIf=\"data?.length && loaded\">\r\n        <span class=\"cursor-pointer font-semibold hover:font-bold\" (click)=\"toggleChart()\">\r\n          <span *ngIf=\"(showChart$ | async)\">- Hide</span>\r\n          <span *ngIf=\"!(showChart$ | async)\">+ Show</span> Chart\r\n        </span>\r\n      </div>\r\n\r\n      <ng-container *ngIf=\"loaded\">\r\n        <div *ngIf=\"!form?.controls?.filter?.value && (showChart$ | async)\">\r\n          <app-line *ngIf=\"dataGraphics?.length\" \r\n            [dataGraphics]=\"dataGraphics\"\r\n            [nameLegend]=\"'All Time Earnings'\"\r\n            [nameAvg]=\"'Average All'\"\r\n            [title]=\"{\r\n              text: 'All Earnings',\r\n              align: 'center'\r\n            }\"\r\n          ></app-line>\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n        </div>\r\n  \r\n        <div *ngIf=\"form.controls.filter.value === 'month' && form.controls.month.value && (showChart$ | async)\">\r\n          <app-line *ngIf=\"dataGraphics?.length\" \r\n                [dataGraphics]=\"dataGraphics\"\r\n                [type]=\"'month'\"\r\n                [nameLegend]=\"'Month Earnings'\"\r\n                [nameAvg]=\"'Average Month'\"\r\n                [title]=\"{\r\n                  text: 'Month Earnings',\r\n                  align: 'center'\r\n                }\"\r\n              ></app-line>\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n        </div>\r\n  \r\n        <div *ngIf=\"form.controls.filter.value === 'year' && form.controls.year.value && (showChart$ | async)\">\r\n          <app-line *ngIf=\"dataGraphics?.length\" \r\n                [dataGraphics]=\"dataGraphics\"\r\n                [type]=\"'year'\"\r\n                [nameLegend]=\"'Year Earnings'\"\r\n                [nameAvg]=\"'Average Year'\"\r\n                [xAxis]=\"{}\"\r\n                [title]=\"{\r\n                  text: 'Year Earnings',\r\n                  align: 'center'\r\n                }\"\r\n              ></app-line>\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n        </div>\r\n  \r\n        <div *ngIf=\"form.controls.filter.value === 'date' && form.controls.date.value && (showChart$ | async)\">\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n        </div>\r\n  \r\n        <div *ngIf=\"form.controls.filter.value === 'dates' && form.controls.date1.value && form.controls.date2.value && (showChart$ | async)\">\r\n          <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"\">\r\n        <app-earnings-person \r\n          [showHeader]=\"false\" \r\n          [showLink]=\"false\" \r\n          [showDelete]=\"true\" \r\n          [padding]=\"false\"></app-earnings-person>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #donuts >\r\n  <div class=\"grid grid-cols-2\">\r\n    <app-donut *ngIf=\"dataGraphics?.length\" \r\n      [dataGraphics]=\"dataGraphics\"\r\n      [type]=\"'categoryearnings'\"\r\n      [title]=\"{\r\n        text: 'Year Category',\r\n        align: 'center'\r\n      }\"\r\n      ></app-donut>\r\n\r\n    <app-donut *ngIf=\"dataGraphics?.length\" \r\n      [dataGraphics]=\"dataGraphics\"\r\n      [type]=\"'account'\"\r\n      [title]=\"{\r\n        text: 'Year Category',\r\n        align: 'center'\r\n      }\"\r\n      ></app-donut>\r\n  </div>\r\n</ng-template>","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { IStoreEarnings } from 'src/app/interfaces/earnings';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { IState } from 'src/app/store';\r\nimport { SetShowChartFiltersEarnings } from 'src/app/store/actions/earnings.actions';\r\nimport { UtilsEarningsService } from './services/utils-earnings.service';\r\n\r\n@Component({\r\n  selector: 'app-earnings',\r\n  templateUrl: './earnings.component.html',\r\n})\r\nexport class EarningsComponent implements OnInit, OnDestroy {\r\n  user:IUserData = {};\r\n  form: FormGroup = new FormGroup({});\r\n  \r\n  showChart$: Observable<boolean> = this.store.select((state) => state?.earnings?.filters?.showChart);\r\n  earnings$: Observable<IStoreEarnings> = this.store.select((state) => state.earnings);\r\n\r\n  queryParams: any;\r\n\r\n  loading: boolean = false;\r\n  loaded: boolean = false;\r\n\r\n  sub: Subscription = new Subscription();\r\n\r\n  dataGraphics: any = [];\r\n\r\n  constructor(\r\n    private store: Store<IState>,\r\n    private activatedRoute: ActivatedRoute,\r\n    private utilsEarnings: UtilsEarningsService\r\n  ) {\r\n    this.buildForm();\r\n\r\n    this.sub = this.store.select(state => state).subscribe(data => {\r\n      try {\r\n        this.loading = data?.earnings?.loading;\r\n        this.loaded = data?.earnings?.loaded;\r\n        this.user = data?.user?.data;\r\n        this.queryParams = data?.earnings?.filters;\r\n\r\n        this.dataGraphics = [{}, ...data?.earnings?.complete];\r\n      } catch (error) { console.log(error); }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sub.unsubscribe();\r\n  }\r\n\r\n  buildForm(){\r\n    this.form = this.utilsEarnings.form();\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  toggleChart(): void{\r\n    this.store.dispatch(SetShowChartFiltersEarnings());\r\n    this.utilsEarnings.createUrl({...this.queryParams}, this.activatedRoute, 'toggleChart()');\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ICategoryEarning } from 'src/app/interfaces/categories_earnings';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { EarningsService } from 'src/app/services/earnings.service';\r\nimport { IState } from 'src/app/store';\r\nimport { CategoriesEarnings } from 'src/app/store/actions/categories_earnings';\r\n\r\n@Component({\r\n  selector: 'app-create-earning-category',\r\n  templateUrl: './create-earning-category.component.html',\r\n  styles: [\r\n  ]\r\n})\r\nexport class CreateEarningCategoryComponent implements OnInit {\r\n  form: FormGroup = new FormGroup({});\r\n\r\n  sus: Subscription = new Subscription();\r\n  user: IUserData = {};\r\n\r\n  categories: Observable<any[]> = this.store.select(state => state.categories_earnings.data);\r\n\r\n  constructor(\r\n    private earningsSrv: EarningsService,\r\n    private store: Store<IState>\r\n  ) { \r\n    this.sus = this.store.subscribe((state) => {\r\n      this.user = state.user.data;\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = new FormGroup({\r\n      category: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.sus.unsubscribe();\r\n  }\r\n\r\n  async createEarningCategory(){\r\n    \r\n    if(this.form.valid){\r\n      let { category } = this.form.controls;\r\n\r\n      try {\r\n        let data = {\r\n          category: category.value,\r\n          person: this.user?.person?.id\r\n        };\r\n        let response: any = await this.earningsSrv.createCategoryEarnings(data);\r\n\r\n        if(response.category){\r\n          console.log('registro exitoso', response);\r\n          this.form.reset();\r\n          this.store.dispatch(CategoriesEarnings({any: response.categories}));\r\n        }else{\r\n          console.log('registro fallido');\r\n        }\r\n      } catch (error) {\r\n        console.log('error => ', error);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  async deleteCategory(item: ICategoryEarning){\r\n    // return;\r\n    if(item.id){\r\n      try {\r\n        let data = {\r\n          category: item.id,\r\n          person: item.id_person\r\n        };\r\n        let response: any = await this.earningsSrv.deleteCategorieEarning(data);\r\n\r\n        if(response.category){\r\n          console.log('categoria eliminada exitosamente');\r\n          this.form.reset();\r\n          this.store.dispatch(CategoriesEarnings({any: response.categories}));\r\n        }else{\r\n          console.log('categoria eliminada fallida');\r\n        }\r\n      } catch (error) {\r\n        console.log('error => ', error);\r\n      }\r\n\r\n    }\r\n  }\r\n}","<div class=\"container pt-5 mx-auto\">\r\n  <div class=\"grid grid-cols-2 gap-4\">\r\n    <div>\r\n\r\n      <div class=\"container pt-5 mx-auto\">\r\n        <h1 class=\"text-center font-bold text-2xl mt-7 mb-5\"><span class=\"icon-wallet mr-1\"></span> Create Earning Category</h1>\r\n\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"createEarningCategory()\">\r\n          <div class=\"w-full\">\r\n            <input type=\"text\" placeholder=\"Earning Category Name\" formControlName=\"category\" class=\"w-full p-2 mb-2\">\r\n          </div>\r\n          <div class=\"w-full\">\r\n            <button type=\"submit\" class=\"btn-form\">Create</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <div>\r\n      <app-list-categories-earnings [padding]=\"false\"></app-list-categories-earnings>\r\n    </div>\r\n  </div>\r\n</div>","<div class=\"search-wrap pt-8 px-6 h-full\">\r\n  <div class=\"search-header\">\r\n    <h4 class=\"main-text flex justify-between\">\r\n      <span>\r\n        Have <b class=\"main-label\">{{ quantity }}</b> earnings with this category <b class=\"main-label\">{{ category?.name }}</b>, by total of <b class=\"main-label\">{{ total  | currency:'$':'symbol':'4.0' }}</b>\r\n      </span>\r\n\r\n      <div class=\"flex gap-2\">\r\n        <!-- Filters -->\r\n        <select class=\"pb-1\" [(ngModel)]=\"id\" (change)=\"seeByCategory()\">\r\n          <option [value]=\"'create'\" *ngIf=\"!(categories$ | async)?.length\" class=\"text-blue-400\">Create one</option>\r\n          <option [value]=\"item.id\" *ngFor=\"let item of (categories$ | async)\">{{ item.name }}</option>\r\n        </select>\r\n\r\n        <select [(ngModel)]=\"limit\" (change)=\"ngOnInit(true)\">\r\n          <option value=\"12\">12</option>\r\n          <option value=\"20\">20</option>\r\n          <option value=\"24\">24</option>\r\n          <option value=\"36\">36</option>\r\n          <option value=\"48\">48</option>\r\n          <option value=\"60\">60</option>\r\n          <option value=\"100\">100</option>\r\n        </select>\r\n      </div>\r\n\r\n    </h4>\r\n  </div>\r\n  <div class=\"search-content overflow-auto\">\r\n    <div class=\"grid xl:grid-cols-4 md:grid-cols-3 grid-cols-2 gap-4 mb-5\" *ngIf=\"earnings && earnings.length\">\r\n      <ng-container *ngFor=\"let item of earnings;let i = index\">\r\n        <app-item-earning [showDelete]=\"false\" [item]=\"item\"></app-item-earning>\r\n      </ng-container>\r\n    </div>\r\n    <div class=\"alert p-2\" *ngIf=\"earnings && !earnings.length\">\r\n      There're not earnings for this category {{category?.name}}, create one <a [routerLink]=\"'/dashboard/earnings/create'\">here</a>\r\n    </div>\r\n  </div>\r\n  <div class=\"search-footer\">\r\n    <div class=\"alert pt-3\" *ngIf=\"earnings && earnings.length\">\r\n      <a class=\"main-btn\" [routerLink]=\"'/dashboard/earnings/create'\"><span class=\"icon-coin-dollar mr-1\"></span> Create Earning</a>\r\n    </div>\r\n    <div class=\"pagetor inline-flex justify-end items-end relative -top-4 text-sm fr\">\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"prev()\" *ngIf=\"(page + 1) > 1\"><</button>\r\n      <span class=\"p-1 bg-gray-900 text-white\">\r\n        Showing \r\n        <span *ngIf=\"limit * (page + 1) < quantity\">{{ limit * (page+1) }}</span>\r\n        <span *ngIf=\"limit * (page + 1) > quantity\">{{quantity}}</span> \r\n        of {{ quantity }} Registers | Page: \r\n        <select class=\"text-black\" [(ngModel)]=\"pageA\" (change)=\"setPage()\">\r\n          <option *ngFor=\"let item of pagesArray\" [value]=\"item\">{{item + 1}}</option>\r\n        </select>/{{ pages }}\r\n      </span>\r\n      <button class=\"btn py-1 px-4 hover:bg-gray-800 transition-all text-white bg-gray-600 text-sm font-bold\" (click)=\"next()\" *ngIf=\"page + 1 < pages\">></button>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ICategoryEarning } from 'src/app/interfaces/categories_earnings';\r\nimport { IUserData } from 'src/app/interfaces/user';\r\nimport { EarningsService } from 'src/app/services/earnings.service';\r\nimport { IState } from 'src/app/store';\r\n\r\n@Component({\r\n  selector: 'app-detail-earning-category',\r\n  templateUrl: './detail-earning-category.component.html'\r\n})\r\nexport class DetailEarningCategoryComponent implements OnInit {\r\n  id: number = 0;\r\n  user: IUserData = {};\r\n  susP: Subscription = new Subscription();\r\n  sus: Subscription = new Subscription();\r\n\r\n  earnings: any = [];\r\n  category: any = [];\r\n  total: number = 0;\r\n  quantity: number = 0;\r\n  page: number = 0;\r\n  pageA: any = 0;\r\n  pages: number = 0;\r\n  pagesArray: any[] = [];\r\n  limit: number = 24;\r\n\r\n  categories$: Observable<ICategoryEarning[]> = this.store.select((state) => state.categories_earnings.data);\r\n\r\n  constructor(\r\n    private store: Store<IState>, \r\n    private earningsSrv: EarningsService, \r\n    private router: Router, \r\n    private route: ActivatedRoute\r\n  ) {\r\n    this.susP = this.route.params.subscribe(params => {\r\n      this.id = params.id;\r\n    });\r\n    this.sus = this.store.select(state => state.user).subscribe(user => {\r\n      console.warn(user);\r\n      this.user = user.data;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.susP.unsubscribe();\r\n    this.sus.unsubscribe();\r\n  }\r\n\r\n  async ngOnInit(reload?: boolean) {\r\n    try {     \r\n      if(reload){\r\n        this.pageA = 0;\r\n        this.page = 0;\r\n        this.pages = 0;\r\n        this.quantity = 0;\r\n        this.total = 0;\r\n        this.earnings = [];\r\n      }\r\n\r\n      const params: any = {\r\n        category: this.id, \r\n        person: this.user.id,\r\n        page: this.page,\r\n        limit: this.limit,\r\n      };\r\n\r\n      let response: any = await this.earningsSrv.getEarningsByCategory(params);\r\n\r\n      console.log(response);\r\n\r\n      if (response.category) {\r\n        this.category = response.category\r\n      }\r\n      if (response.earnings) {\r\n        this.earnings = response.earnings.rows;\r\n      }\r\n      if (response.total) {\r\n        this.total = response.total;\r\n      }\r\n      if (response.quantity) {\r\n        this.quantity = response.quantity;\r\n      }\r\n      if (response.pages) {\r\n        this.pages = response.pages;\r\n        this.pagesArray = [];\r\n        for (let i = 0; i < this.pages; i++) {\r\n          this.pagesArray.push(i);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  setPage(): void {\r\n    this.page = parseInt(this.pageA);\r\n    this.ngOnInit();\r\n  }\r\n\r\n  next(): void {\r\n    this.page++;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  prev(): void {\r\n    this.page--;\r\n    this.pageA = this.page;\r\n    this.ngOnInit();\r\n  }\r\n\r\n  seeByCategory(){\r\n    this.router.navigateByUrl(`/dashboard/earnings/by-category/${this.id}`);\r\n    this.ngOnInit(true);\r\n  }\r\n\r\n}\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { UtilsEarningsService } from '../services/utils-earnings.service';\r\n\r\n@Component({\r\n  selector: 'app-home-earnings',\r\n  templateUrl: './home-earnings.component.html'\r\n})\r\nexport class HomeEarningsComponent implements OnInit {\r\n  form: FormGroup = new FormGroup({});\r\n\r\n  constructor(private utilsEarnings: UtilsEarningsService) { }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(){\r\n    this.form = this.utilsEarnings.form();\r\n  }\r\n\r\n}\r\n","<div class=\"px-6 py-5\">\r\n  <form [formGroup]=\"form\">\r\n    <app-earnings-filters [form]=\"form\"></app-earnings-filters>\r\n  </form>\r\n\r\n  <app-earnings-person \r\n    [showHeader]=\"false\" \r\n    [showLink]=\"false\" \r\n    [showDelete]=\"true\" \r\n    [padding]=\"false\"></app-earnings-person>\r\n</div>\r\n","<div class=\"container mt-8 mx-auto\">  \r\n  <div class=\"grid gap-4\" *ngIf=\"earning?.id\">\r\n    <app-item-earning \r\n      [showDelete]=\"true\" \r\n      [item]=\"earning\" \r\n      [link]=\"false\" \r\n      [complete]=\"true\">\r\n    </app-item-earning>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { EarningsService } from 'src/app/services/earnings.service';\r\n\r\n@Component({\r\n  selector: 'app-detail-earning',\r\n  templateUrl: './detail-earning.component.html'\r\n})\r\nexport class DetailEarningComponent implements OnInit {\r\n  id: number = 0;\r\n  susP: Subscription = new Subscription();\r\n\r\n  earning: any = [];\r\n  total: number = 0;\r\n\r\n  constructor(\r\n    private earningSrv: EarningsService, \r\n    private route: ActivatedRoute, \r\n    private router: Router\r\n  ) {\r\n    this.susP = this.route.params.subscribe(params => {\r\n      this.id = params.id;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(){\r\n    this.susP.unsubscribe();\r\n  }\r\n\r\n  async ngOnInit() {\r\n    try {\r\n      let response: any = await this.earningSrv.getDataEarning(this.id);\r\n\r\n      if (response && Object.keys(response).length) {\r\n        this.earning = response;\r\n      }else{\r\n        if(this.router.url.indexOf('details') > 0){\r\n          this.router.navigate(['/dashboard/earnings']);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      if(this.router.url.indexOf('details') > 0){\r\n        this.router.navigate(['/dashboard/earnings']);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"px-6 py-5\">\r\n  <form [formGroup]=\"form\">\r\n    <app-earnings-filters [form]=\"form\" [isFromGraphics]=\"true\"></app-earnings-filters>\r\n  </form>\r\n\r\n  <ng-container *ngIf=\"loaded\">\r\n    <div *ngIf=\"!form?.controls?.filter?.value\">\r\n      <app-line *ngIf=\"dataGraphics?.length\" \r\n        [dataGraphics]=\"dataGraphics\"\r\n        [nameLegend]=\"'All Time Earnings'\"\r\n        [nameAvg]=\"'Average All'\"\r\n        [title]=\"{\r\n          text: 'All Earnings',\r\n          align: 'center'\r\n        }\"\r\n      ></app-line>\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n\r\n    <div *ngIf=\"form.controls.filter.value === 'month' && form.controls.month.value\">\r\n      <app-line *ngIf=\"dataGraphics?.length\" \r\n            [dataGraphics]=\"dataGraphics\"\r\n            [type]=\"'month'\"\r\n            [nameLegend]=\"'Month Earnings'\"\r\n            [nameAvg]=\"'Average Month'\"\r\n            [title]=\"{\r\n              text: 'Month Earnings',\r\n              align: 'center'\r\n            }\"\r\n          ></app-line>\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n\r\n    <div *ngIf=\"form.controls.filter.value === 'year' && form.controls.year.value\">\r\n      <app-line *ngIf=\"dataGraphics?.length\" \r\n            [dataGraphics]=\"dataGraphics\"\r\n            [type]=\"'year'\"\r\n            [nameLegend]=\"'Year Earnings'\"\r\n            [nameAvg]=\"'Average Year'\"\r\n            [xAxis]=\"{}\"\r\n            [title]=\"{\r\n              text: 'Year Earnings',\r\n              align: 'center'\r\n            }\"\r\n          ></app-line>\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n\r\n    <div *ngIf=\"form.controls.filter.value === 'date' && form.controls.date.value\">\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n\r\n    <div *ngIf=\"form.controls.filter.value === 'dates' && form.controls.date1.value && form.controls.date2.value\">\r\n      <ng-template [ngTemplateOutlet]=\"donuts\"></ng-template>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-template #donuts >\r\n  <div class=\"grid grid-cols-2\">\r\n    <app-donut *ngIf=\"dataGraphics?.length\" \r\n      [dataGraphics]=\"dataGraphics\"\r\n      [type]=\"'categoryearnings'\"\r\n      [title]=\"{\r\n        text: 'Year Category',\r\n        align: 'center'\r\n      }\"\r\n      ></app-donut>\r\n\r\n    <app-donut *ngIf=\"dataGraphics?.length\" \r\n      [dataGraphics]=\"dataGraphics\"\r\n      [type]=\"'account'\"\r\n      [title]=\"{\r\n        text: 'Year Category',\r\n        align: 'center'\r\n      }\"\r\n      ></app-donut>\r\n  </div>\r\n</ng-template>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { StartEarningsComponent } from './start/start-earnings.component';\r\nimport { DashboardService } from 'src/app/guards/dashboard.service';\r\nimport { EarningsComponent } from './earnings.component';\r\nimport { CreateEarningCategoryComponent } from './categories/create/create-earning-category.component';\r\nimport { DetailEarningCategoryComponent } from './categories/detail/detail-earning-category.component';\r\nimport { ListCategoriesEarningsComponent } from './categories/list/list.component';\r\nimport { HomeEarningsComponent } from './home/home-earnings.component';\r\nimport { DetailEarningComponent } from './detail/detail-earning.component';\r\nimport { GraphicsEarningsComponent } from './graphics/graphics-earnings.component';\r\n\r\nconst routes: Routes = [\r\n  { \r\n    path: '', component: StartEarningsComponent, canActivate: [DashboardService],\r\n    children: [\r\n      { path: '', component: HomeEarningsComponent },\r\n      { path: 'create', component: EarningsComponent },\r\n      { path: 'graphics', component: GraphicsEarningsComponent },\r\n      { path: ':id/details', component: DetailEarningComponent },\r\n\r\n      { path: 'categories', component: ListCategoriesEarningsComponent },\r\n      { path: 'categories/create', component: CreateEarningCategoryComponent },\r\n      { path: 'by-category/:id', component: DetailEarningCategoryComponent },    \r\n    ] \r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class EarningsRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { UtilsEarningsService } from '../services/utils-earnings.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { IState } from 'src/app/store';\r\nimport { Store } from '@ngrx/store';\r\n\r\n@Component({\r\n  selector: 'app-graphics-earnings',\r\n  templateUrl: './graphics-earnings.component.html'\r\n})\r\nexport class GraphicsEarningsComponent implements OnInit {\r\n  form: FormGroup = new FormGroup({});\r\n\r\n  loading: boolean = false;\r\n  loaded: boolean = false;\r\n  dataGraphics: any = [];\r\n\r\n  sub: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private utilsEarnings: UtilsEarningsService,\r\n    private store: Store<IState>,\r\n  ) {\r\n    this.sub = this.store.select(state => state).subscribe(data => {\r\n      try {\r\n        this.loading = data?.earnings?.loading;\r\n        this.loaded = data?.earnings?.loaded;\r\n\r\n        this.dataGraphics = [{}, ...data?.earnings?.complete];\r\n      } catch (error) { console.log(error); }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.buildForm();\r\n  }\r\n\r\n  buildForm(){\r\n    this.form = this.utilsEarnings.form();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { NgApexchartsModule } from 'ng-apexcharts';\r\nimport { SharedModule } from 'src/app/components/shared.module';\r\nimport { CreateEarningComponent } from './create/create-earning.component';\r\nimport { CreateEarningCategoryComponent } from './categories/create/create-earning-category.component';\r\nimport { DetailEarningCategoryComponent } from './categories/detail/detail-earning-category.component';\r\nimport { StartEarningsComponent } from './start/start-earnings.component';\r\nimport { EarningsRoutingModule } from './earnings-routing.module';\r\nimport { EarningsComponent } from './earnings.component';\r\nimport { HomeEarningsComponent } from './home/home-earnings.component';\r\nimport { DetailEarningComponent } from './detail/detail-earning.component';\r\nimport { GraphicsEarningsComponent } from './graphics/graphics-earnings.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    EarningsComponent,\r\n    CreateEarningComponent,\r\n    CreateEarningCategoryComponent,\r\n    DetailEarningCategoryComponent,\r\n    StartEarningsComponent,\r\n    HomeEarningsComponent,\r\n    DetailEarningComponent,\r\n    GraphicsEarningsComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgSelectModule,\r\n    NgApexchartsModule,\r\n    EarningsRoutingModule,\r\n    SharedModule,\r\n  ],\r\n})\r\nexport class EarningsModule { }\r\n"],"sourceRoot":"webpack:///","file":"177.6d5f4f75e83fc95019c1.js"}